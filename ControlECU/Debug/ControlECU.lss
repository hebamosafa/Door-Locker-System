
ControlECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002506  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002506  0000259a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800068  00800068  000025a2  2**0
                  ALLOC
  3 .stab         00002c64  00000000  00000000  000025a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001434  00000000  00000000  00005208  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000663c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000677c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000068ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008535  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009420  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a1d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a330  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a5bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ad8b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 44 07 	jmp	0xe88	; 0xe88 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 f3 10 	jmp	0x21e6	; 0x21e6 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 26 11 	jmp	0x224c	; 0x224c <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ac 36       	cpi	r26, 0x6C	; 108
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e6 e0       	ldi	r30, 0x06	; 6
      78:	f5 e2       	ldi	r31, 0x25	; 37
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <main>
      8a:	0c 94 81 12 	jmp	0x2502	; 0x2502 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 05 12 	jmp	0x240a	; 0x240a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 21 12 	jmp	0x2442	; 0x2442 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 11 12 	jmp	0x2422	; 0x2422 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2d 12 	jmp	0x245a	; 0x245a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 11 12 	jmp	0x2422	; 0x2422 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2d 12 	jmp	0x245a	; 0x245a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 05 12 	jmp	0x240a	; 0x240a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 21 12 	jmp	0x2442	; 0x2442 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 11 12 	jmp	0x2422	; 0x2422 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 2d 12 	jmp	0x245a	; 0x245a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 11 12 	jmp	0x2422	; 0x2422 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 2d 12 	jmp	0x245a	; 0x245a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 11 12 	jmp	0x2422	; 0x2422 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 2d 12 	jmp	0x245a	; 0x245a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 15 12 	jmp	0x242a	; 0x242a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 31 12 	jmp	0x2462	; 0x2462 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void ADC_init(config_adc*config_adc_ptr)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <ADC_init+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	9a 83       	std	Y+2, r25	; 0x02
     b52:	89 83       	std	Y+1, r24	; 0x01
	/* ADMUX Register Bits Description:
	 * REFS1:0 = 00 to choose to connect external reference voltage by input this voltage through AREF pin
	 * ADLAR   = 0 right adjusted
	 * MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	ADMUX = 0;
     b54:	e7 e2       	ldi	r30, 0x27	; 39
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	10 82       	st	Z, r1
	ADMUX|=((config_adc_ptr->ref_bit)<<6);
     b5a:	a7 e2       	ldi	r26, 0x27	; 39
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	e7 e2       	ldi	r30, 0x27	; 39
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	28 2f       	mov	r18, r24
     b66:	e9 81       	ldd	r30, Y+1	; 0x01
     b68:	fa 81       	ldd	r31, Y+2	; 0x02
     b6a:	81 81       	ldd	r24, Z+1	; 0x01
     b6c:	88 2f       	mov	r24, r24
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	00 24       	eor	r0, r0
     b72:	96 95       	lsr	r25
     b74:	87 95       	ror	r24
     b76:	07 94       	ror	r0
     b78:	96 95       	lsr	r25
     b7a:	87 95       	ror	r24
     b7c:	07 94       	ror	r0
     b7e:	98 2f       	mov	r25, r24
     b80:	80 2d       	mov	r24, r0
     b82:	82 2b       	or	r24, r18
     b84:	8c 93       	st	X, r24
	/* ADCSRA Register Bits Description:
	 * ADEN    = 1 Enable ADC
	 * ADIE    = 0 Disable ADC Interrupt
	 * ADPS2:0 = 011 to choose ADC_Clock=F_CPU/8=1Mhz/8=125Khz --> ADC must operate in range 50-200Khz
	 */
	ADCSRA = (1<<ADEN);
     b86:	e6 e2       	ldi	r30, 0x26	; 38
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	80 e8       	ldi	r24, 0x80	; 128
     b8c:	80 83       	st	Z, r24
	ADCSRA=(ADCSRA &0xF8)|config_adc_ptr->clock;
     b8e:	a6 e2       	ldi	r26, 0x26	; 38
     b90:	b0 e0       	ldi	r27, 0x00	; 0
     b92:	e6 e2       	ldi	r30, 0x26	; 38
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	80 81       	ld	r24, Z
     b98:	98 2f       	mov	r25, r24
     b9a:	98 7f       	andi	r25, 0xF8	; 248
     b9c:	e9 81       	ldd	r30, Y+1	; 0x01
     b9e:	fa 81       	ldd	r31, Y+2	; 0x02
     ba0:	80 81       	ld	r24, Z
     ba2:	89 2b       	or	r24, r25
     ba4:	8c 93       	st	X, r24


}
     ba6:	0f 90       	pop	r0
     ba8:	0f 90       	pop	r0
     baa:	cf 91       	pop	r28
     bac:	df 91       	pop	r29
     bae:	08 95       	ret

00000bb0 <ADC_readChannel>:

uint16 ADC_readChannel(uint8 channel_num)
{
     bb0:	df 93       	push	r29
     bb2:	cf 93       	push	r28
     bb4:	0f 92       	push	r0
     bb6:	cd b7       	in	r28, 0x3d	; 61
     bb8:	de b7       	in	r29, 0x3e	; 62
     bba:	89 83       	std	Y+1, r24	; 0x01
	channel_num &= 0x07; /* channel number must be from 0 --> 7 */
     bbc:	89 81       	ldd	r24, Y+1	; 0x01
     bbe:	87 70       	andi	r24, 0x07	; 7
     bc0:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xE0; /* clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
     bc2:	a7 e2       	ldi	r26, 0x27	; 39
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
     bc6:	e7 e2       	ldi	r30, 0x27	; 39
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	80 81       	ld	r24, Z
     bcc:	80 7e       	andi	r24, 0xE0	; 224
     bce:	8c 93       	st	X, r24
	ADMUX = ADMUX | channel_num; /* choose the correct channel by setting the channel number in MUX4:0 bits */
     bd0:	a7 e2       	ldi	r26, 0x27	; 39
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	e7 e2       	ldi	r30, 0x27	; 39
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	90 81       	ld	r25, Z
     bda:	89 81       	ldd	r24, Y+1	; 0x01
     bdc:	89 2b       	or	r24, r25
     bde:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC); /* start conversion write '1' to ADSC */
     be0:	a6 e2       	ldi	r26, 0x26	; 38
     be2:	b0 e0       	ldi	r27, 0x00	; 0
     be4:	e6 e2       	ldi	r30, 0x26	; 38
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	80 81       	ld	r24, Z
     bea:	80 64       	ori	r24, 0x40	; 64
     bec:	8c 93       	st	X, r24
	while(BIT_IS_CLEAR(ADCSRA,ADIF)); /* wait for conversion to complete ADIF becomes '1' */
     bee:	e6 e2       	ldi	r30, 0x26	; 38
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	80 81       	ld	r24, Z
     bf4:	88 2f       	mov	r24, r24
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	80 71       	andi	r24, 0x10	; 16
     bfa:	90 70       	andi	r25, 0x00	; 0
     bfc:	00 97       	sbiw	r24, 0x00	; 0
     bfe:	b9 f3       	breq	.-18     	; 0xbee <ADC_readChannel+0x3e>
	SET_BIT(ADCSRA,ADIF); /* clear ADIF by write '1' to it :) */
     c00:	a6 e2       	ldi	r26, 0x26	; 38
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	e6 e2       	ldi	r30, 0x26	; 38
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 81       	ld	r24, Z
     c0a:	80 61       	ori	r24, 0x10	; 16
     c0c:	8c 93       	st	X, r24
	return ADC; /* return the data register */
     c0e:	e4 e2       	ldi	r30, 0x24	; 36
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	80 81       	ld	r24, Z
     c14:	91 81       	ldd	r25, Z+1	; 0x01
}
     c16:	0f 90       	pop	r0
     c18:	cf 91       	pop	r28
     c1a:	df 91       	pop	r29
     c1c:	08 95       	ret

00000c1e <ADC_init2>:
void ADC_init2(void)
{
     c1e:	df 93       	push	r29
     c20:	cf 93       	push	r28
     c22:	cd b7       	in	r28, 0x3d	; 61
     c24:	de b7       	in	r29, 0x3e	; 62
	/* ADMUX Register Bits Description:
	 * REFS1:0 = 00 to choose to connect external reference voltage by input this voltage through AREF pin
	 * ADLAR   = 0 right adjusted
	 * MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	ADMUX = 0;
     c26:	e7 e2       	ldi	r30, 0x27	; 39
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	10 82       	st	Z, r1
	/* ADCSRA Register Bits Description:
	 * ADEN    = 1 Enable ADC
	 * ADIE    = 0 Disable ADC Interrupt
	 * ADPS2:0 = 011 to choose ADC_Clock=F_CPU/8=1Mhz/8=125Khz --> ADC must operate in range 50-200Khz
	 */
	ADCSRA = (1<<ADEN) | (1<<ADPS1) | (1<<ADPS0);
     c2c:	e6 e2       	ldi	r30, 0x26	; 38
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	83 e8       	ldi	r24, 0x83	; 131
     c32:	80 83       	st	Z, r24
}
     c34:	cf 91       	pop	r28
     c36:	df 91       	pop	r29
     c38:	08 95       	ret

00000c3a <EEPROM_init>:
 *******************************************************************************/
#include "i2c.h"
#include "external_eeprom.h"

void EEPROM_init(void)
{
     c3a:	df 93       	push	r29
     c3c:	cf 93       	push	r28
     c3e:	cd b7       	in	r28, 0x3d	; 61
     c40:	de b7       	in	r29, 0x3e	; 62
	/* just initialize the I2C(TWI) module inside the MC */
	TWI_init();
     c42:	0e 94 c7 06 	call	0xd8e	; 0xd8e <TWI_init>
}
     c46:	cf 91       	pop	r28
     c48:	df 91       	pop	r29
     c4a:	08 95       	ret

00000c4c <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     c4c:	df 93       	push	r29
     c4e:	cf 93       	push	r28
     c50:	00 d0       	rcall	.+0      	; 0xc52 <EEPROM_writeByte+0x6>
     c52:	00 d0       	rcall	.+0      	; 0xc54 <EEPROM_writeByte+0x8>
     c54:	cd b7       	in	r28, 0x3d	; 61
     c56:	de b7       	in	r29, 0x3e	; 62
     c58:	9a 83       	std	Y+2, r25	; 0x02
     c5a:	89 83       	std	Y+1, r24	; 0x01
     c5c:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     c5e:	0e 94 dd 06 	call	0xdba	; 0xdba <TWI_start>
    if (TWI_getStatus() != TW_START)
     c62:	0e 94 35 07 	call	0xe6a	; 0xe6a <TWI_getStatus>
     c66:	88 30       	cpi	r24, 0x08	; 8
     c68:	11 f0       	breq	.+4      	; 0xc6e <EEPROM_writeByte+0x22>
        return ERROR;
     c6a:	1c 82       	std	Y+4, r1	; 0x04
     c6c:	28 c0       	rjmp	.+80     	; 0xcbe <EEPROM_writeByte+0x72>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
     c6e:	89 81       	ldd	r24, Y+1	; 0x01
     c70:	9a 81       	ldd	r25, Y+2	; 0x02
     c72:	80 70       	andi	r24, 0x00	; 0
     c74:	97 70       	andi	r25, 0x07	; 7
     c76:	88 0f       	add	r24, r24
     c78:	89 2f       	mov	r24, r25
     c7a:	88 1f       	adc	r24, r24
     c7c:	99 0b       	sbc	r25, r25
     c7e:	91 95       	neg	r25
     c80:	80 6a       	ori	r24, 0xA0	; 160
     c82:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
     c86:	0e 94 35 07 	call	0xe6a	; 0xe6a <TWI_getStatus>
     c8a:	88 31       	cpi	r24, 0x18	; 24
     c8c:	11 f0       	breq	.+4      	; 0xc92 <EEPROM_writeByte+0x46>
        return ERROR;
     c8e:	1c 82       	std	Y+4, r1	; 0x04
     c90:	16 c0       	rjmp	.+44     	; 0xcbe <EEPROM_writeByte+0x72>

    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
     c92:	89 81       	ldd	r24, Y+1	; 0x01
     c94:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
     c98:	0e 94 35 07 	call	0xe6a	; 0xe6a <TWI_getStatus>
     c9c:	88 32       	cpi	r24, 0x28	; 40
     c9e:	11 f0       	breq	.+4      	; 0xca4 <EEPROM_writeByte+0x58>
        return ERROR;
     ca0:	1c 82       	std	Y+4, r1	; 0x04
     ca2:	0d c0       	rjmp	.+26     	; 0xcbe <EEPROM_writeByte+0x72>

    /* write byte to eeprom */
    TWI_write(u8data);
     ca4:	8b 81       	ldd	r24, Y+3	; 0x03
     ca6:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
     caa:	0e 94 35 07 	call	0xe6a	; 0xe6a <TWI_getStatus>
     cae:	88 32       	cpi	r24, 0x28	; 40
     cb0:	11 f0       	breq	.+4      	; 0xcb6 <EEPROM_writeByte+0x6a>
        return ERROR;
     cb2:	1c 82       	std	Y+4, r1	; 0x04
     cb4:	04 c0       	rjmp	.+8      	; 0xcbe <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
     cb6:	0e 94 ed 06 	call	0xdda	; 0xdda <TWI_stop>

    return SUCCESS;
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	8c 83       	std	Y+4, r24	; 0x04
     cbe:	8c 81       	ldd	r24, Y+4	; 0x04
}
     cc0:	0f 90       	pop	r0
     cc2:	0f 90       	pop	r0
     cc4:	0f 90       	pop	r0
     cc6:	0f 90       	pop	r0
     cc8:	cf 91       	pop	r28
     cca:	df 91       	pop	r29
     ccc:	08 95       	ret

00000cce <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     cce:	df 93       	push	r29
     cd0:	cf 93       	push	r28
     cd2:	00 d0       	rcall	.+0      	; 0xcd4 <EEPROM_readByte+0x6>
     cd4:	00 d0       	rcall	.+0      	; 0xcd6 <EEPROM_readByte+0x8>
     cd6:	0f 92       	push	r0
     cd8:	cd b7       	in	r28, 0x3d	; 61
     cda:	de b7       	in	r29, 0x3e	; 62
     cdc:	9a 83       	std	Y+2, r25	; 0x02
     cde:	89 83       	std	Y+1, r24	; 0x01
     ce0:	7c 83       	std	Y+4, r23	; 0x04
     ce2:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     ce4:	0e 94 dd 06 	call	0xdba	; 0xdba <TWI_start>
    if (TWI_getStatus() != TW_START)
     ce8:	0e 94 35 07 	call	0xe6a	; 0xe6a <TWI_getStatus>
     cec:	88 30       	cpi	r24, 0x08	; 8
     cee:	11 f0       	breq	.+4      	; 0xcf4 <EEPROM_readByte+0x26>
        return ERROR;
     cf0:	1d 82       	std	Y+5, r1	; 0x05
     cf2:	44 c0       	rjmp	.+136    	; 0xd7c <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     cf4:	89 81       	ldd	r24, Y+1	; 0x01
     cf6:	9a 81       	ldd	r25, Y+2	; 0x02
     cf8:	80 70       	andi	r24, 0x00	; 0
     cfa:	97 70       	andi	r25, 0x07	; 7
     cfc:	88 0f       	add	r24, r24
     cfe:	89 2f       	mov	r24, r25
     d00:	88 1f       	adc	r24, r24
     d02:	99 0b       	sbc	r25, r25
     d04:	91 95       	neg	r25
     d06:	80 6a       	ori	r24, 0xA0	; 160
     d08:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
     d0c:	0e 94 35 07 	call	0xe6a	; 0xe6a <TWI_getStatus>
     d10:	88 31       	cpi	r24, 0x18	; 24
     d12:	11 f0       	breq	.+4      	; 0xd18 <EEPROM_readByte+0x4a>
        return ERROR;
     d14:	1d 82       	std	Y+5, r1	; 0x05
     d16:	32 c0       	rjmp	.+100    	; 0xd7c <EEPROM_readByte+0xae>

    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
     d18:	89 81       	ldd	r24, Y+1	; 0x01
     d1a:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
     d1e:	0e 94 35 07 	call	0xe6a	; 0xe6a <TWI_getStatus>
     d22:	88 32       	cpi	r24, 0x28	; 40
     d24:	11 f0       	breq	.+4      	; 0xd2a <EEPROM_readByte+0x5c>
        return ERROR;
     d26:	1d 82       	std	Y+5, r1	; 0x05
     d28:	29 c0       	rjmp	.+82     	; 0xd7c <EEPROM_readByte+0xae>

    /* Send the Repeated Start Bit */
    TWI_start();
     d2a:	0e 94 dd 06 	call	0xdba	; 0xdba <TWI_start>
    if (TWI_getStatus() != TW_REP_START)
     d2e:	0e 94 35 07 	call	0xe6a	; 0xe6a <TWI_getStatus>
     d32:	80 31       	cpi	r24, 0x10	; 16
     d34:	11 f0       	breq	.+4      	; 0xd3a <EEPROM_readByte+0x6c>
        return ERROR;
     d36:	1d 82       	std	Y+5, r1	; 0x05
     d38:	21 c0       	rjmp	.+66     	; 0xd7c <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
     d3c:	9a 81       	ldd	r25, Y+2	; 0x02
     d3e:	80 70       	andi	r24, 0x00	; 0
     d40:	97 70       	andi	r25, 0x07	; 7
     d42:	88 0f       	add	r24, r24
     d44:	89 2f       	mov	r24, r25
     d46:	88 1f       	adc	r24, r24
     d48:	99 0b       	sbc	r25, r25
     d4a:	91 95       	neg	r25
     d4c:	81 6a       	ori	r24, 0xA1	; 161
     d4e:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_R_ACK)
     d52:	0e 94 35 07 	call	0xe6a	; 0xe6a <TWI_getStatus>
     d56:	80 34       	cpi	r24, 0x40	; 64
     d58:	11 f0       	breq	.+4      	; 0xd5e <EEPROM_readByte+0x90>
        return ERROR;
     d5a:	1d 82       	std	Y+5, r1	; 0x05
     d5c:	0f c0       	rjmp	.+30     	; 0xd7c <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readWithNACK();
     d5e:	0e 94 22 07 	call	0xe44	; 0xe44 <TWI_readWithNACK>
     d62:	eb 81       	ldd	r30, Y+3	; 0x03
     d64:	fc 81       	ldd	r31, Y+4	; 0x04
     d66:	80 83       	st	Z, r24
    if (TWI_getStatus() != TW_MR_DATA_NACK)
     d68:	0e 94 35 07 	call	0xe6a	; 0xe6a <TWI_getStatus>
     d6c:	88 35       	cpi	r24, 0x58	; 88
     d6e:	11 f0       	breq	.+4      	; 0xd74 <EEPROM_readByte+0xa6>
        return ERROR;
     d70:	1d 82       	std	Y+5, r1	; 0x05
     d72:	04 c0       	rjmp	.+8      	; 0xd7c <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
     d74:	0e 94 ed 06 	call	0xdda	; 0xdda <TWI_stop>
    return SUCCESS;
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	8d 83       	std	Y+5, r24	; 0x05
     d7c:	8d 81       	ldd	r24, Y+5	; 0x05
}
     d7e:	0f 90       	pop	r0
     d80:	0f 90       	pop	r0
     d82:	0f 90       	pop	r0
     d84:	0f 90       	pop	r0
     d86:	0f 90       	pop	r0
     d88:	cf 91       	pop	r28
     d8a:	df 91       	pop	r29
     d8c:	08 95       	ret

00000d8e <TWI_init>:
 *******************************************************************************/

#include "i2c.h"

void TWI_init(void)
{
     d8e:	df 93       	push	r29
     d90:	cf 93       	push	r28
     d92:	cd b7       	in	r28, 0x3d	; 61
     d94:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
     d96:	e0 e2       	ldi	r30, 0x20	; 32
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	82 e0       	ldi	r24, 0x02	; 2
     d9c:	80 83       	st	Z, r24
	TWSR = 0x00;
     d9e:	e1 e2       	ldi	r30, 0x21	; 33
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	10 82       	st	Z, r1

    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :)
     da4:	e2 e2       	ldi	r30, 0x22	; 34
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	82 e0       	ldi	r24, 0x02	; 2
     daa:	80 83       	st	Z, r24

    TWCR = (1<<TWEN); /* enable TWI */
     dac:	e6 e5       	ldi	r30, 0x56	; 86
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	84 e0       	ldi	r24, 0x04	; 4
     db2:	80 83       	st	Z, r24
}
     db4:	cf 91       	pop	r28
     db6:	df 91       	pop	r29
     db8:	08 95       	ret

00000dba <TWI_start>:

void TWI_start(void)
{
     dba:	df 93       	push	r29
     dbc:	cf 93       	push	r28
     dbe:	cd b7       	in	r28, 0x3d	; 61
     dc0:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     dc2:	e6 e5       	ldi	r30, 0x56	; 86
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	84 ea       	ldi	r24, 0xA4	; 164
     dc8:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     dca:	e6 e5       	ldi	r30, 0x56	; 86
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	88 23       	and	r24, r24
     dd2:	dc f7       	brge	.-10     	; 0xdca <TWI_start+0x10>
}
     dd4:	cf 91       	pop	r28
     dd6:	df 91       	pop	r29
     dd8:	08 95       	ret

00000dda <TWI_stop>:

void TWI_stop(void)
{
     dda:	df 93       	push	r29
     ddc:	cf 93       	push	r28
     dde:	cd b7       	in	r28, 0x3d	; 61
     de0:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     de2:	e6 e5       	ldi	r30, 0x56	; 86
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	84 e9       	ldi	r24, 0x94	; 148
     de8:	80 83       	st	Z, r24
}
     dea:	cf 91       	pop	r28
     dec:	df 91       	pop	r29
     dee:	08 95       	ret

00000df0 <TWI_write>:

void TWI_write(uint8 data)
{
     df0:	df 93       	push	r29
     df2:	cf 93       	push	r28
     df4:	0f 92       	push	r0
     df6:	cd b7       	in	r28, 0x3d	; 61
     df8:	de b7       	in	r29, 0x3e	; 62
     dfa:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
     dfc:	e3 e2       	ldi	r30, 0x23	; 35
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	89 81       	ldd	r24, Y+1	; 0x01
     e02:	80 83       	st	Z, r24
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
     e04:	e6 e5       	ldi	r30, 0x56	; 86
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	84 e8       	ldi	r24, 0x84	; 132
     e0a:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     e0c:	e6 e5       	ldi	r30, 0x56	; 86
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	88 23       	and	r24, r24
     e14:	dc f7       	brge	.-10     	; 0xe0c <TWI_write+0x1c>
}
     e16:	0f 90       	pop	r0
     e18:	cf 91       	pop	r28
     e1a:	df 91       	pop	r29
     e1c:	08 95       	ret

00000e1e <TWI_readWithACK>:

uint8 TWI_readWithACK(void)
{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
     e26:	e6 e5       	ldi	r30, 0x56	; 86
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	84 ec       	ldi	r24, 0xC4	; 196
     e2c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     e2e:	e6 e5       	ldi	r30, 0x56	; 86
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	88 23       	and	r24, r24
     e36:	dc f7       	brge	.-10     	; 0xe2e <TWI_readWithACK+0x10>
    /* Read Data */
    return TWDR;
     e38:	e3 e2       	ldi	r30, 0x23	; 35
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
}
     e3e:	cf 91       	pop	r28
     e40:	df 91       	pop	r29
     e42:	08 95       	ret

00000e44 <TWI_readWithNACK>:

uint8 TWI_readWithNACK(void)
{
     e44:	df 93       	push	r29
     e46:	cf 93       	push	r28
     e48:	cd b7       	in	r28, 0x3d	; 61
     e4a:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
     e4c:	e6 e5       	ldi	r30, 0x56	; 86
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	84 e8       	ldi	r24, 0x84	; 132
     e52:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     e54:	e6 e5       	ldi	r30, 0x56	; 86
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	88 23       	and	r24, r24
     e5c:	dc f7       	brge	.-10     	; 0xe54 <TWI_readWithNACK+0x10>
    /* Read Data */
    return TWDR;
     e5e:	e3 e2       	ldi	r30, 0x23	; 35
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
}
     e64:	cf 91       	pop	r28
     e66:	df 91       	pop	r29
     e68:	08 95       	ret

00000e6a <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
     e6a:	df 93       	push	r29
     e6c:	cf 93       	push	r28
     e6e:	0f 92       	push	r0
     e70:	cd b7       	in	r28, 0x3d	; 61
     e72:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
     e74:	e1 e2       	ldi	r30, 0x21	; 33
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	88 7f       	andi	r24, 0xF8	; 248
     e7c:	89 83       	std	Y+1, r24	; 0x01
    return status;
     e7e:	89 81       	ldd	r24, Y+1	; 0x01
}
     e80:	0f 90       	pop	r0
     e82:	cf 91       	pop	r28
     e84:	df 91       	pop	r29
     e86:	08 95       	ret

00000e88 <__vector_5>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_CAPT_vect)
{
     e88:	1f 92       	push	r1
     e8a:	0f 92       	push	r0
     e8c:	0f b6       	in	r0, 0x3f	; 63
     e8e:	0f 92       	push	r0
     e90:	11 24       	eor	r1, r1
     e92:	2f 93       	push	r18
     e94:	3f 93       	push	r19
     e96:	4f 93       	push	r20
     e98:	5f 93       	push	r21
     e9a:	6f 93       	push	r22
     e9c:	7f 93       	push	r23
     e9e:	8f 93       	push	r24
     ea0:	9f 93       	push	r25
     ea2:	af 93       	push	r26
     ea4:	bf 93       	push	r27
     ea6:	ef 93       	push	r30
     ea8:	ff 93       	push	r31
     eaa:	df 93       	push	r29
     eac:	cf 93       	push	r28
     eae:	cd b7       	in	r28, 0x3d	; 61
     eb0:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
     eb2:	80 91 68 00 	lds	r24, 0x0068
     eb6:	90 91 69 00 	lds	r25, 0x0069
     eba:	00 97       	sbiw	r24, 0x00	; 0
     ebc:	29 f0       	breq	.+10     	; 0xec8 <__vector_5+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     ebe:	e0 91 68 00 	lds	r30, 0x0068
     ec2:	f0 91 69 00 	lds	r31, 0x0069
     ec6:	09 95       	icall
	}
}
     ec8:	cf 91       	pop	r28
     eca:	df 91       	pop	r29
     ecc:	ff 91       	pop	r31
     ece:	ef 91       	pop	r30
     ed0:	bf 91       	pop	r27
     ed2:	af 91       	pop	r26
     ed4:	9f 91       	pop	r25
     ed6:	8f 91       	pop	r24
     ed8:	7f 91       	pop	r23
     eda:	6f 91       	pop	r22
     edc:	5f 91       	pop	r21
     ede:	4f 91       	pop	r20
     ee0:	3f 91       	pop	r19
     ee2:	2f 91       	pop	r18
     ee4:	0f 90       	pop	r0
     ee6:	0f be       	out	0x3f, r0	; 63
     ee8:	0f 90       	pop	r0
     eea:	1f 90       	pop	r1
     eec:	18 95       	reti

00000eee <Icu_init>:
 * 	2. Set the required edge detection.
 * 	3. Enable the Input Capture Interrupt.
 * 	4. Initialize Timer1 Registers
 */
void Icu_init(const Icu_ConfigType * Config_Ptr)
{
     eee:	df 93       	push	r29
     ef0:	cf 93       	push	r28
     ef2:	00 d0       	rcall	.+0      	; 0xef4 <Icu_init+0x6>
     ef4:	cd b7       	in	r28, 0x3d	; 61
     ef6:	de b7       	in	r29, 0x3e	; 62
     ef8:	9a 83       	std	Y+2, r25	; 0x02
     efa:	89 83       	std	Y+1, r24	; 0x01
	/* Configure ICP1/PD6 as i/p pin */
	DDRD &= ~(1<<PD6);
     efc:	a1 e3       	ldi	r26, 0x31	; 49
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	e1 e3       	ldi	r30, 0x31	; 49
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	8f 7b       	andi	r24, 0xBF	; 191
     f08:	8c 93       	st	X, r24

	/* Timer1 always operates in Normal Mode */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
     f0a:	ef e4       	ldi	r30, 0x4F	; 79
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	8c e0       	ldi	r24, 0x0C	; 12
     f10:	80 83       	st	Z, r24

	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
     f12:	ae e4       	ldi	r26, 0x4E	; 78
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	ee e4       	ldi	r30, 0x4E	; 78
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	98 2f       	mov	r25, r24
     f1e:	98 7f       	andi	r25, 0xF8	; 248
     f20:	e9 81       	ldd	r30, Y+1	; 0x01
     f22:	fa 81       	ldd	r31, Y+2	; 0x02
     f24:	80 81       	ld	r24, Z
     f26:	89 2b       	or	r24, r25
     f28:	8c 93       	st	X, r24
	/*
     * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge)<<6);
     f2a:	ae e4       	ldi	r26, 0x4E	; 78
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	ee e4       	ldi	r30, 0x4E	; 78
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	28 2f       	mov	r18, r24
     f36:	2f 7b       	andi	r18, 0xBF	; 191
     f38:	e9 81       	ldd	r30, Y+1	; 0x01
     f3a:	fa 81       	ldd	r31, Y+2	; 0x02
     f3c:	81 81       	ldd	r24, Z+1	; 0x01
     f3e:	88 2f       	mov	r24, r24
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	00 24       	eor	r0, r0
     f44:	96 95       	lsr	r25
     f46:	87 95       	ror	r24
     f48:	07 94       	ror	r0
     f4a:	96 95       	lsr	r25
     f4c:	87 95       	ror	r24
     f4e:	07 94       	ror	r0
     f50:	98 2f       	mov	r25, r24
     f52:	80 2d       	mov	r24, r0
     f54:	82 2b       	or	r24, r18
     f56:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1 = 0;
     f58:	ec e4       	ldi	r30, 0x4C	; 76
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	11 82       	std	Z+1, r1	; 0x01
     f5e:	10 82       	st	Z, r1

	/* Initial Value for the input capture register */
	ICR1 = 0;
     f60:	e6 e4       	ldi	r30, 0x46	; 70
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	11 82       	std	Z+1, r1	; 0x01
     f66:	10 82       	st	Z, r1

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	TIMSK |= (1<<TICIE1);
     f68:	a9 e5       	ldi	r26, 0x59	; 89
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	e9 e5       	ldi	r30, 0x59	; 89
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	80 62       	ori	r24, 0x20	; 32
     f74:	8c 93       	st	X, r24
}
     f76:	0f 90       	pop	r0
     f78:	0f 90       	pop	r0
     f7a:	cf 91       	pop	r28
     f7c:	df 91       	pop	r29
     f7e:	08 95       	ret

00000f80 <Icu_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void Icu_setCallBack(void(*a_ptr)(void))
{
     f80:	df 93       	push	r29
     f82:	cf 93       	push	r28
     f84:	00 d0       	rcall	.+0      	; 0xf86 <Icu_setCallBack+0x6>
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62
     f8a:	9a 83       	std	Y+2, r25	; 0x02
     f8c:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
     f8e:	89 81       	ldd	r24, Y+1	; 0x01
     f90:	9a 81       	ldd	r25, Y+2	; 0x02
     f92:	90 93 69 00 	sts	0x0069, r25
     f96:	80 93 68 00 	sts	0x0068, r24
}
     f9a:	0f 90       	pop	r0
     f9c:	0f 90       	pop	r0
     f9e:	cf 91       	pop	r28
     fa0:	df 91       	pop	r29
     fa2:	08 95       	ret

00000fa4 <Icu_setEdgeDetectionType>:

/*
 * Description: Function to set the required edge detection.
 */
void Icu_setEdgeDetectionType(const Icu_EdgeType a_edgeType)
{
     fa4:	df 93       	push	r29
     fa6:	cf 93       	push	r28
     fa8:	0f 92       	push	r0
     faa:	cd b7       	in	r28, 0x3d	; 61
     fac:	de b7       	in	r29, 0x3e	; 62
     fae:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | (a_edgeType<<6);
     fb0:	ae e4       	ldi	r26, 0x4E	; 78
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	ee e4       	ldi	r30, 0x4E	; 78
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	28 2f       	mov	r18, r24
     fbc:	2f 7b       	andi	r18, 0xBF	; 191
     fbe:	89 81       	ldd	r24, Y+1	; 0x01
     fc0:	88 2f       	mov	r24, r24
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	00 24       	eor	r0, r0
     fc6:	96 95       	lsr	r25
     fc8:	87 95       	ror	r24
     fca:	07 94       	ror	r0
     fcc:	96 95       	lsr	r25
     fce:	87 95       	ror	r24
     fd0:	07 94       	ror	r0
     fd2:	98 2f       	mov	r25, r24
     fd4:	80 2d       	mov	r24, r0
     fd6:	82 2b       	or	r24, r18
     fd8:	8c 93       	st	X, r24
}
     fda:	0f 90       	pop	r0
     fdc:	cf 91       	pop	r28
     fde:	df 91       	pop	r29
     fe0:	08 95       	ret

00000fe2 <Icu_getInputCaptureValue>:
/*
 * Description: Function to get the Timer1 Value when the input is captured
 *              The value stored at Input Capture Register ICR1
 */
uint16 Icu_getInputCaptureValue(void)
{
     fe2:	df 93       	push	r29
     fe4:	cf 93       	push	r28
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
     fea:	e6 e4       	ldi	r30, 0x46	; 70
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	91 81       	ldd	r25, Z+1	; 0x01
}
     ff2:	cf 91       	pop	r28
     ff4:	df 91       	pop	r29
     ff6:	08 95       	ret

00000ff8 <Icu_clearTimerValue>:

/*
 * Description: Function to clear the Timer1 Value to start count from ZERO
 */
void Icu_clearTimerValue(void)
{
     ff8:	df 93       	push	r29
     ffa:	cf 93       	push	r28
     ffc:	cd b7       	in	r28, 0x3d	; 61
     ffe:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    1000:	ec e4       	ldi	r30, 0x4C	; 76
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	11 82       	std	Z+1, r1	; 0x01
    1006:	10 82       	st	Z, r1
}
    1008:	cf 91       	pop	r28
    100a:	df 91       	pop	r29
    100c:	08 95       	ret

0000100e <Icu_DeInit>:

/*
 * Description: Function to disable the Timer1 to stop the ICU Driver
 */
void Icu_DeInit(void)
{
    100e:	df 93       	push	r29
    1010:	cf 93       	push	r28
    1012:	cd b7       	in	r28, 0x3d	; 61
    1014:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    1016:	ef e4       	ldi	r30, 0x4F	; 79
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	10 82       	st	Z, r1
	TCCR1B = 0;
    101c:	ee e4       	ldi	r30, 0x4E	; 78
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	10 82       	st	Z, r1
	TCNT1 = 0;
    1022:	ec e4       	ldi	r30, 0x4C	; 76
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	11 82       	std	Z+1, r1	; 0x01
    1028:	10 82       	st	Z, r1
	ICR1 = 0;
    102a:	e6 e4       	ldi	r30, 0x46	; 70
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	11 82       	std	Z+1, r1	; 0x01
    1030:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	TIMSK &= ~(1<<TICIE1);
    1032:	a9 e5       	ldi	r26, 0x59	; 89
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	e9 e5       	ldi	r30, 0x59	; 89
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	8f 7d       	andi	r24, 0xDF	; 223
    103e:	8c 93       	st	X, r24
}
    1040:	cf 91       	pop	r28
    1042:	df 91       	pop	r29
    1044:	08 95       	ret

00001046 <KeyPad_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void)
{
    1046:	df 93       	push	r29
    1048:	cf 93       	push	r28
    104a:	00 d0       	rcall	.+0      	; 0x104c <KeyPad_getPressedKey+0x6>
    104c:	cd b7       	in	r28, 0x3d	; 61
    104e:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    1050:	1a 82       	std	Y+2, r1	; 0x02
    1052:	4c c0       	rjmp	.+152    	; 0x10ec <KeyPad_getPressedKey+0xa6>
		{
			/*
			 * each time only one of the column pins will be output and
			 * the rest will be input pins include the row pins
			 */
			KEYPAD_PORT_DIR = (0b00010000<<col);
    1054:	ea e3       	ldi	r30, 0x3A	; 58
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	8a 81       	ldd	r24, Y+2	; 0x02
    105a:	28 2f       	mov	r18, r24
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	80 e1       	ldi	r24, 0x10	; 16
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <KeyPad_getPressedKey+0x22>
    1064:	88 0f       	add	r24, r24
    1066:	99 1f       	adc	r25, r25
    1068:	2a 95       	dec	r18
    106a:	e2 f7       	brpl	.-8      	; 0x1064 <KeyPad_getPressedKey+0x1e>
    106c:	80 83       	st	Z, r24

			/*
			 * clear the output pin column in this trace and enable the internal
			 * pull up resistors for the rows pins
			 */
			KEYPAD_PORT_OUT = (~(0b00010000<<col));
    106e:	eb e3       	ldi	r30, 0x3B	; 59
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	8a 81       	ldd	r24, Y+2	; 0x02
    1074:	28 2f       	mov	r18, r24
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	80 e1       	ldi	r24, 0x10	; 16
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	02 2e       	mov	r0, r18
    107e:	02 c0       	rjmp	.+4      	; 0x1084 <KeyPad_getPressedKey+0x3e>
    1080:	88 0f       	add	r24, r24
    1082:	99 1f       	adc	r25, r25
    1084:	0a 94       	dec	r0
    1086:	e2 f7       	brpl	.-8      	; 0x1080 <KeyPad_getPressedKey+0x3a>
    1088:	80 95       	com	r24
    108a:	80 83       	st	Z, r24

			for(row=0;row<N_row;row++) /* loop for rows */
    108c:	19 82       	std	Y+1, r1	; 0x01
    108e:	28 c0       	rjmp	.+80     	; 0x10e0 <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */
    1090:	e9 e3       	ldi	r30, 0x39	; 57
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	28 2f       	mov	r18, r24
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	89 81       	ldd	r24, Y+1	; 0x01
    109c:	88 2f       	mov	r24, r24
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	a9 01       	movw	r20, r18
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <KeyPad_getPressedKey+0x62>
    10a4:	55 95       	asr	r21
    10a6:	47 95       	ror	r20
    10a8:	8a 95       	dec	r24
    10aa:	e2 f7       	brpl	.-8      	; 0x10a4 <KeyPad_getPressedKey+0x5e>
    10ac:	ca 01       	movw	r24, r20
    10ae:	81 70       	andi	r24, 0x01	; 1
    10b0:	90 70       	andi	r25, 0x00	; 0
    10b2:	00 97       	sbiw	r24, 0x00	; 0
    10b4:	91 f4       	brne	.+36     	; 0x10da <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
    10b6:	89 81       	ldd	r24, Y+1	; 0x01
    10b8:	88 2f       	mov	r24, r24
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	88 0f       	add	r24, r24
    10be:	99 1f       	adc	r25, r25
    10c0:	88 0f       	add	r24, r24
    10c2:	99 1f       	adc	r25, r25
    10c4:	98 2f       	mov	r25, r24
    10c6:	8a 81       	ldd	r24, Y+2	; 0x02
    10c8:	89 0f       	add	r24, r25
    10ca:	8f 5f       	subi	r24, 0xFF	; 255
    10cc:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <KeyPad_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}
}
    10d0:	0f 90       	pop	r0
    10d2:	0f 90       	pop	r0
    10d4:	cf 91       	pop	r28
    10d6:	df 91       	pop	r29
    10d8:	08 95       	ret
			 * clear the output pin column in this trace and enable the internal
			 * pull up resistors for the rows pins
			 */
			KEYPAD_PORT_OUT = (~(0b00010000<<col));

			for(row=0;row<N_row;row++) /* loop for rows */
    10da:	89 81       	ldd	r24, Y+1	; 0x01
    10dc:	8f 5f       	subi	r24, 0xFF	; 255
    10de:	89 83       	std	Y+1, r24	; 0x01
    10e0:	89 81       	ldd	r24, Y+1	; 0x01
    10e2:	84 30       	cpi	r24, 0x04	; 4
    10e4:	a8 f2       	brcs	.-86     	; 0x1090 <KeyPad_getPressedKey+0x4a>
uint8 KeyPad_getPressedKey(void)
{
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    10e6:	8a 81       	ldd	r24, Y+2	; 0x02
    10e8:	8f 5f       	subi	r24, 0xFF	; 255
    10ea:	8a 83       	std	Y+2, r24	; 0x02
    10ec:	8a 81       	ldd	r24, Y+2	; 0x02
    10ee:	84 30       	cpi	r24, 0x04	; 4
    10f0:	08 f4       	brcc	.+2      	; 0x10f4 <KeyPad_getPressedKey+0xae>
    10f2:	b0 cf       	rjmp	.-160    	; 0x1054 <KeyPad_getPressedKey+0xe>
    10f4:	ad cf       	rjmp	.-166    	; 0x1050 <KeyPad_getPressedKey+0xa>

000010f6 <KeyPad_4x4_adjustKeyNumber>:
}

#elif (N_col == 4)

static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
    10f6:	df 93       	push	r29
    10f8:	cf 93       	push	r28
    10fa:	00 d0       	rcall	.+0      	; 0x10fc <KeyPad_4x4_adjustKeyNumber+0x6>
    10fc:	00 d0       	rcall	.+0      	; 0x10fe <KeyPad_4x4_adjustKeyNumber+0x8>
    10fe:	cd b7       	in	r28, 0x3d	; 61
    1100:	de b7       	in	r29, 0x3e	; 62
    1102:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    1104:	89 81       	ldd	r24, Y+1	; 0x01
    1106:	28 2f       	mov	r18, r24
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	3c 83       	std	Y+4, r19	; 0x04
    110c:	2b 83       	std	Y+3, r18	; 0x03
    110e:	8b 81       	ldd	r24, Y+3	; 0x03
    1110:	9c 81       	ldd	r25, Y+4	; 0x04
    1112:	88 30       	cpi	r24, 0x08	; 8
    1114:	91 05       	cpc	r25, r1
    1116:	09 f4       	brne	.+2      	; 0x111a <KeyPad_4x4_adjustKeyNumber+0x24>
    1118:	70 c0       	rjmp	.+224    	; 0x11fa <KeyPad_4x4_adjustKeyNumber+0x104>
    111a:	2b 81       	ldd	r18, Y+3	; 0x03
    111c:	3c 81       	ldd	r19, Y+4	; 0x04
    111e:	29 30       	cpi	r18, 0x09	; 9
    1120:	31 05       	cpc	r19, r1
    1122:	5c f5       	brge	.+86     	; 0x117a <KeyPad_4x4_adjustKeyNumber+0x84>
    1124:	8b 81       	ldd	r24, Y+3	; 0x03
    1126:	9c 81       	ldd	r25, Y+4	; 0x04
    1128:	84 30       	cpi	r24, 0x04	; 4
    112a:	91 05       	cpc	r25, r1
    112c:	09 f4       	brne	.+2      	; 0x1130 <KeyPad_4x4_adjustKeyNumber+0x3a>
    112e:	59 c0       	rjmp	.+178    	; 0x11e2 <KeyPad_4x4_adjustKeyNumber+0xec>
    1130:	2b 81       	ldd	r18, Y+3	; 0x03
    1132:	3c 81       	ldd	r19, Y+4	; 0x04
    1134:	25 30       	cpi	r18, 0x05	; 5
    1136:	31 05       	cpc	r19, r1
    1138:	9c f4       	brge	.+38     	; 0x1160 <KeyPad_4x4_adjustKeyNumber+0x6a>
    113a:	8b 81       	ldd	r24, Y+3	; 0x03
    113c:	9c 81       	ldd	r25, Y+4	; 0x04
    113e:	82 30       	cpi	r24, 0x02	; 2
    1140:	91 05       	cpc	r25, r1
    1142:	09 f4       	brne	.+2      	; 0x1146 <KeyPad_4x4_adjustKeyNumber+0x50>
    1144:	48 c0       	rjmp	.+144    	; 0x11d6 <KeyPad_4x4_adjustKeyNumber+0xe0>
    1146:	2b 81       	ldd	r18, Y+3	; 0x03
    1148:	3c 81       	ldd	r19, Y+4	; 0x04
    114a:	23 30       	cpi	r18, 0x03	; 3
    114c:	31 05       	cpc	r19, r1
    114e:	0c f0       	brlt	.+2      	; 0x1152 <KeyPad_4x4_adjustKeyNumber+0x5c>
    1150:	45 c0       	rjmp	.+138    	; 0x11dc <KeyPad_4x4_adjustKeyNumber+0xe6>
    1152:	8b 81       	ldd	r24, Y+3	; 0x03
    1154:	9c 81       	ldd	r25, Y+4	; 0x04
    1156:	81 30       	cpi	r24, 0x01	; 1
    1158:	91 05       	cpc	r25, r1
    115a:	09 f4       	brne	.+2      	; 0x115e <KeyPad_4x4_adjustKeyNumber+0x68>
    115c:	39 c0       	rjmp	.+114    	; 0x11d0 <KeyPad_4x4_adjustKeyNumber+0xda>
    115e:	67 c0       	rjmp	.+206    	; 0x122e <KeyPad_4x4_adjustKeyNumber+0x138>
    1160:	2b 81       	ldd	r18, Y+3	; 0x03
    1162:	3c 81       	ldd	r19, Y+4	; 0x04
    1164:	26 30       	cpi	r18, 0x06	; 6
    1166:	31 05       	cpc	r19, r1
    1168:	09 f4       	brne	.+2      	; 0x116c <KeyPad_4x4_adjustKeyNumber+0x76>
    116a:	41 c0       	rjmp	.+130    	; 0x11ee <KeyPad_4x4_adjustKeyNumber+0xf8>
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	87 30       	cpi	r24, 0x07	; 7
    1172:	91 05       	cpc	r25, r1
    1174:	0c f0       	brlt	.+2      	; 0x1178 <KeyPad_4x4_adjustKeyNumber+0x82>
    1176:	3e c0       	rjmp	.+124    	; 0x11f4 <KeyPad_4x4_adjustKeyNumber+0xfe>
    1178:	37 c0       	rjmp	.+110    	; 0x11e8 <KeyPad_4x4_adjustKeyNumber+0xf2>
    117a:	2b 81       	ldd	r18, Y+3	; 0x03
    117c:	3c 81       	ldd	r19, Y+4	; 0x04
    117e:	2c 30       	cpi	r18, 0x0C	; 12
    1180:	31 05       	cpc	r19, r1
    1182:	09 f4       	brne	.+2      	; 0x1186 <KeyPad_4x4_adjustKeyNumber+0x90>
    1184:	46 c0       	rjmp	.+140    	; 0x1212 <KeyPad_4x4_adjustKeyNumber+0x11c>
    1186:	8b 81       	ldd	r24, Y+3	; 0x03
    1188:	9c 81       	ldd	r25, Y+4	; 0x04
    118a:	8d 30       	cpi	r24, 0x0D	; 13
    118c:	91 05       	cpc	r25, r1
    118e:	5c f4       	brge	.+22     	; 0x11a6 <KeyPad_4x4_adjustKeyNumber+0xb0>
    1190:	2b 81       	ldd	r18, Y+3	; 0x03
    1192:	3c 81       	ldd	r19, Y+4	; 0x04
    1194:	2a 30       	cpi	r18, 0x0A	; 10
    1196:	31 05       	cpc	r19, r1
    1198:	b1 f1       	breq	.+108    	; 0x1206 <KeyPad_4x4_adjustKeyNumber+0x110>
    119a:	8b 81       	ldd	r24, Y+3	; 0x03
    119c:	9c 81       	ldd	r25, Y+4	; 0x04
    119e:	8b 30       	cpi	r24, 0x0B	; 11
    11a0:	91 05       	cpc	r25, r1
    11a2:	a4 f5       	brge	.+104    	; 0x120c <KeyPad_4x4_adjustKeyNumber+0x116>
    11a4:	2d c0       	rjmp	.+90     	; 0x1200 <KeyPad_4x4_adjustKeyNumber+0x10a>
    11a6:	2b 81       	ldd	r18, Y+3	; 0x03
    11a8:	3c 81       	ldd	r19, Y+4	; 0x04
    11aa:	2e 30       	cpi	r18, 0x0E	; 14
    11ac:	31 05       	cpc	r19, r1
    11ae:	b9 f1       	breq	.+110    	; 0x121e <KeyPad_4x4_adjustKeyNumber+0x128>
    11b0:	8b 81       	ldd	r24, Y+3	; 0x03
    11b2:	9c 81       	ldd	r25, Y+4	; 0x04
    11b4:	8e 30       	cpi	r24, 0x0E	; 14
    11b6:	91 05       	cpc	r25, r1
    11b8:	7c f1       	brlt	.+94     	; 0x1218 <KeyPad_4x4_adjustKeyNumber+0x122>
    11ba:	2b 81       	ldd	r18, Y+3	; 0x03
    11bc:	3c 81       	ldd	r19, Y+4	; 0x04
    11be:	2f 30       	cpi	r18, 0x0F	; 15
    11c0:	31 05       	cpc	r19, r1
    11c2:	79 f1       	breq	.+94     	; 0x1222 <KeyPad_4x4_adjustKeyNumber+0x12c>
    11c4:	8b 81       	ldd	r24, Y+3	; 0x03
    11c6:	9c 81       	ldd	r25, Y+4	; 0x04
    11c8:	80 31       	cpi	r24, 0x10	; 16
    11ca:	91 05       	cpc	r25, r1
    11cc:	69 f1       	breq	.+90     	; 0x1228 <KeyPad_4x4_adjustKeyNumber+0x132>
    11ce:	2f c0       	rjmp	.+94     	; 0x122e <KeyPad_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7;
    11d0:	97 e0       	ldi	r25, 0x07	; 7
    11d2:	9a 83       	std	Y+2, r25	; 0x02
    11d4:	2e c0       	rjmp	.+92     	; 0x1232 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8;
    11d6:	28 e0       	ldi	r18, 0x08	; 8
    11d8:	2a 83       	std	Y+2, r18	; 0x02
    11da:	2b c0       	rjmp	.+86     	; 0x1232 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9;
    11dc:	39 e0       	ldi	r19, 0x09	; 9
    11de:	3a 83       	std	Y+2, r19	; 0x02
    11e0:	28 c0       	rjmp	.+80     	; 0x1232 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '%'; // ASCII Code of %
    11e2:	85 e2       	ldi	r24, 0x25	; 37
    11e4:	8a 83       	std	Y+2, r24	; 0x02
    11e6:	25 c0       	rjmp	.+74     	; 0x1232 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4;
    11e8:	94 e0       	ldi	r25, 0x04	; 4
    11ea:	9a 83       	std	Y+2, r25	; 0x02
    11ec:	22 c0       	rjmp	.+68     	; 0x1232 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
    11ee:	25 e0       	ldi	r18, 0x05	; 5
    11f0:	2a 83       	std	Y+2, r18	; 0x02
    11f2:	1f c0       	rjmp	.+62     	; 0x1232 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6;
    11f4:	36 e0       	ldi	r19, 0x06	; 6
    11f6:	3a 83       	std	Y+2, r19	; 0x02
    11f8:	1c c0       	rjmp	.+56     	; 0x1232 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
    11fa:	8a e2       	ldi	r24, 0x2A	; 42
    11fc:	8a 83       	std	Y+2, r24	; 0x02
    11fe:	19 c0       	rjmp	.+50     	; 0x1232 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 9: return 1;
    1200:	91 e0       	ldi	r25, 0x01	; 1
    1202:	9a 83       	std	Y+2, r25	; 0x02
    1204:	16 c0       	rjmp	.+44     	; 0x1232 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2;
    1206:	22 e0       	ldi	r18, 0x02	; 2
    1208:	2a 83       	std	Y+2, r18	; 0x02
    120a:	13 c0       	rjmp	.+38     	; 0x1232 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3;
    120c:	33 e0       	ldi	r19, 0x03	; 3
    120e:	3a 83       	std	Y+2, r19	; 0x02
    1210:	10 c0       	rjmp	.+32     	; 0x1232 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
    1212:	8d e2       	ldi	r24, 0x2D	; 45
    1214:	8a 83       	std	Y+2, r24	; 0x02
    1216:	0d c0       	rjmp	.+26     	; 0x1232 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return 13;  /* ASCII of Enter */
    1218:	9d e0       	ldi	r25, 0x0D	; 13
    121a:	9a 83       	std	Y+2, r25	; 0x02
    121c:	0a c0       	rjmp	.+20     	; 0x1232 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 14: return 0;
    121e:	1a 82       	std	Y+2, r1	; 0x02
    1220:	08 c0       	rjmp	.+16     	; 0x1232 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '='; /* ASCII Code of '=' */
    1222:	2d e3       	ldi	r18, 0x3D	; 61
    1224:	2a 83       	std	Y+2, r18	; 0x02
    1226:	05 c0       	rjmp	.+10     	; 0x1232 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
    1228:	3b e2       	ldi	r19, 0x2B	; 43
    122a:	3a 83       	std	Y+2, r19	; 0x02
    122c:	02 c0       	rjmp	.+4      	; 0x1232 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		default: return button_number;
    122e:	89 81       	ldd	r24, Y+1	; 0x01
    1230:	8a 83       	std	Y+2, r24	; 0x02
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    1234:	0f 90       	pop	r0
    1236:	0f 90       	pop	r0
    1238:	0f 90       	pop	r0
    123a:	0f 90       	pop	r0
    123c:	cf 91       	pop	r28
    123e:	df 91       	pop	r29
    1240:	08 95       	ret

00001242 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    1242:	df 93       	push	r29
    1244:	cf 93       	push	r28
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    124a:	a1 e3       	ldi	r26, 0x31	; 49
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	e1 e3       	ldi	r30, 0x31	; 49
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	80 67       	ori	r24, 0x70	; 112
    1256:	8c 93       	st	X, r24
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
		#endif
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */
    1258:	e4 e3       	ldi	r30, 0x34	; 52
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	8f ef       	ldi	r24, 0xFF	; 255
    125e:	80 83       	st	Z, r24
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1260:	88 e3       	ldi	r24, 0x38	; 56
    1262:	0e 94 3c 09 	call	0x1278	; 0x1278 <LCD_sendCommand>
	#endif
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    1266:	8c e0       	ldi	r24, 0x0C	; 12
    1268:	0e 94 3c 09 	call	0x1278	; 0x1278 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	0e 94 3c 09 	call	0x1278	; 0x1278 <LCD_sendCommand>
}
    1272:	cf 91       	pop	r28
    1274:	df 91       	pop	r29
    1276:	08 95       	ret

00001278 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    1278:	df 93       	push	r29
    127a:	cf 93       	push	r28
    127c:	cd b7       	in	r28, 0x3d	; 61
    127e:	de b7       	in	r29, 0x3e	; 62
    1280:	e9 97       	sbiw	r28, 0x39	; 57
    1282:	0f b6       	in	r0, 0x3f	; 63
    1284:	f8 94       	cli
    1286:	de bf       	out	0x3e, r29	; 62
    1288:	0f be       	out	0x3f, r0	; 63
    128a:	cd bf       	out	0x3d, r28	; 61
    128c:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    128e:	a2 e3       	ldi	r26, 0x32	; 50
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	e2 e3       	ldi	r30, 0x32	; 50
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 81       	ld	r24, Z
    1298:	8f 7e       	andi	r24, 0xEF	; 239
    129a:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    129c:	a2 e3       	ldi	r26, 0x32	; 50
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	e2 e3       	ldi	r30, 0x32	; 50
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	8f 7d       	andi	r24, 0xDF	; 223
    12a8:	8c 93       	st	X, r24
    12aa:	80 e0       	ldi	r24, 0x00	; 0
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	a0 e8       	ldi	r26, 0x80	; 128
    12b0:	bf e3       	ldi	r27, 0x3F	; 63
    12b2:	8d ab       	std	Y+53, r24	; 0x35
    12b4:	9e ab       	std	Y+54, r25	; 0x36
    12b6:	af ab       	std	Y+55, r26	; 0x37
    12b8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12ba:	6d a9       	ldd	r22, Y+53	; 0x35
    12bc:	7e a9       	ldd	r23, Y+54	; 0x36
    12be:	8f a9       	ldd	r24, Y+55	; 0x37
    12c0:	98 ad       	ldd	r25, Y+56	; 0x38
    12c2:	20 e0       	ldi	r18, 0x00	; 0
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	4a e7       	ldi	r20, 0x7A	; 122
    12c8:	53 e4       	ldi	r21, 0x43	; 67
    12ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12ce:	dc 01       	movw	r26, r24
    12d0:	cb 01       	movw	r24, r22
    12d2:	89 ab       	std	Y+49, r24	; 0x31
    12d4:	9a ab       	std	Y+50, r25	; 0x32
    12d6:	ab ab       	std	Y+51, r26	; 0x33
    12d8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    12da:	69 a9       	ldd	r22, Y+49	; 0x31
    12dc:	7a a9       	ldd	r23, Y+50	; 0x32
    12de:	8b a9       	ldd	r24, Y+51	; 0x33
    12e0:	9c a9       	ldd	r25, Y+52	; 0x34
    12e2:	20 e0       	ldi	r18, 0x00	; 0
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	40 e8       	ldi	r20, 0x80	; 128
    12e8:	5f e3       	ldi	r21, 0x3F	; 63
    12ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12ee:	88 23       	and	r24, r24
    12f0:	2c f4       	brge	.+10     	; 0x12fc <LCD_sendCommand+0x84>
		__ticks = 1;
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	98 ab       	std	Y+48, r25	; 0x30
    12f8:	8f a7       	std	Y+47, r24	; 0x2f
    12fa:	3f c0       	rjmp	.+126    	; 0x137a <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    12fc:	69 a9       	ldd	r22, Y+49	; 0x31
    12fe:	7a a9       	ldd	r23, Y+50	; 0x32
    1300:	8b a9       	ldd	r24, Y+51	; 0x33
    1302:	9c a9       	ldd	r25, Y+52	; 0x34
    1304:	20 e0       	ldi	r18, 0x00	; 0
    1306:	3f ef       	ldi	r19, 0xFF	; 255
    1308:	4f e7       	ldi	r20, 0x7F	; 127
    130a:	57 e4       	ldi	r21, 0x47	; 71
    130c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1310:	18 16       	cp	r1, r24
    1312:	4c f5       	brge	.+82     	; 0x1366 <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1314:	6d a9       	ldd	r22, Y+53	; 0x35
    1316:	7e a9       	ldd	r23, Y+54	; 0x36
    1318:	8f a9       	ldd	r24, Y+55	; 0x37
    131a:	98 ad       	ldd	r25, Y+56	; 0x38
    131c:	20 e0       	ldi	r18, 0x00	; 0
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	40 e2       	ldi	r20, 0x20	; 32
    1322:	51 e4       	ldi	r21, 0x41	; 65
    1324:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1328:	dc 01       	movw	r26, r24
    132a:	cb 01       	movw	r24, r22
    132c:	bc 01       	movw	r22, r24
    132e:	cd 01       	movw	r24, r26
    1330:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1334:	dc 01       	movw	r26, r24
    1336:	cb 01       	movw	r24, r22
    1338:	98 ab       	std	Y+48, r25	; 0x30
    133a:	8f a7       	std	Y+47, r24	; 0x2f
    133c:	0f c0       	rjmp	.+30     	; 0x135c <LCD_sendCommand+0xe4>
    133e:	89 e1       	ldi	r24, 0x19	; 25
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	9e a7       	std	Y+46, r25	; 0x2e
    1344:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1346:	8d a5       	ldd	r24, Y+45	; 0x2d
    1348:	9e a5       	ldd	r25, Y+46	; 0x2e
    134a:	01 97       	sbiw	r24, 0x01	; 1
    134c:	f1 f7       	brne	.-4      	; 0x134a <LCD_sendCommand+0xd2>
    134e:	9e a7       	std	Y+46, r25	; 0x2e
    1350:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1352:	8f a5       	ldd	r24, Y+47	; 0x2f
    1354:	98 a9       	ldd	r25, Y+48	; 0x30
    1356:	01 97       	sbiw	r24, 0x01	; 1
    1358:	98 ab       	std	Y+48, r25	; 0x30
    135a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    135c:	8f a5       	ldd	r24, Y+47	; 0x2f
    135e:	98 a9       	ldd	r25, Y+48	; 0x30
    1360:	00 97       	sbiw	r24, 0x00	; 0
    1362:	69 f7       	brne	.-38     	; 0x133e <LCD_sendCommand+0xc6>
    1364:	14 c0       	rjmp	.+40     	; 0x138e <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1366:	69 a9       	ldd	r22, Y+49	; 0x31
    1368:	7a a9       	ldd	r23, Y+50	; 0x32
    136a:	8b a9       	ldd	r24, Y+51	; 0x33
    136c:	9c a9       	ldd	r25, Y+52	; 0x34
    136e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1372:	dc 01       	movw	r26, r24
    1374:	cb 01       	movw	r24, r22
    1376:	98 ab       	std	Y+48, r25	; 0x30
    1378:	8f a7       	std	Y+47, r24	; 0x2f
    137a:	8f a5       	ldd	r24, Y+47	; 0x2f
    137c:	98 a9       	ldd	r25, Y+48	; 0x30
    137e:	9c a7       	std	Y+44, r25	; 0x2c
    1380:	8b a7       	std	Y+43, r24	; 0x2b
    1382:	8b a5       	ldd	r24, Y+43	; 0x2b
    1384:	9c a5       	ldd	r25, Y+44	; 0x2c
    1386:	01 97       	sbiw	r24, 0x01	; 1
    1388:	f1 f7       	brne	.-4      	; 0x1386 <LCD_sendCommand+0x10e>
    138a:	9c a7       	std	Y+44, r25	; 0x2c
    138c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    138e:	a2 e3       	ldi	r26, 0x32	; 50
    1390:	b0 e0       	ldi	r27, 0x00	; 0
    1392:	e2 e3       	ldi	r30, 0x32	; 50
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	80 64       	ori	r24, 0x40	; 64
    139a:	8c 93       	st	X, r24
    139c:	80 e0       	ldi	r24, 0x00	; 0
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	a0 e8       	ldi	r26, 0x80	; 128
    13a2:	bf e3       	ldi	r27, 0x3F	; 63
    13a4:	8f a3       	std	Y+39, r24	; 0x27
    13a6:	98 a7       	std	Y+40, r25	; 0x28
    13a8:	a9 a7       	std	Y+41, r26	; 0x29
    13aa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13ac:	6f a1       	ldd	r22, Y+39	; 0x27
    13ae:	78 a5       	ldd	r23, Y+40	; 0x28
    13b0:	89 a5       	ldd	r24, Y+41	; 0x29
    13b2:	9a a5       	ldd	r25, Y+42	; 0x2a
    13b4:	20 e0       	ldi	r18, 0x00	; 0
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	4a e7       	ldi	r20, 0x7A	; 122
    13ba:	53 e4       	ldi	r21, 0x43	; 67
    13bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13c0:	dc 01       	movw	r26, r24
    13c2:	cb 01       	movw	r24, r22
    13c4:	8b a3       	std	Y+35, r24	; 0x23
    13c6:	9c a3       	std	Y+36, r25	; 0x24
    13c8:	ad a3       	std	Y+37, r26	; 0x25
    13ca:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    13cc:	6b a1       	ldd	r22, Y+35	; 0x23
    13ce:	7c a1       	ldd	r23, Y+36	; 0x24
    13d0:	8d a1       	ldd	r24, Y+37	; 0x25
    13d2:	9e a1       	ldd	r25, Y+38	; 0x26
    13d4:	20 e0       	ldi	r18, 0x00	; 0
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	40 e8       	ldi	r20, 0x80	; 128
    13da:	5f e3       	ldi	r21, 0x3F	; 63
    13dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13e0:	88 23       	and	r24, r24
    13e2:	2c f4       	brge	.+10     	; 0x13ee <LCD_sendCommand+0x176>
		__ticks = 1;
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	9a a3       	std	Y+34, r25	; 0x22
    13ea:	89 a3       	std	Y+33, r24	; 0x21
    13ec:	3f c0       	rjmp	.+126    	; 0x146c <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    13ee:	6b a1       	ldd	r22, Y+35	; 0x23
    13f0:	7c a1       	ldd	r23, Y+36	; 0x24
    13f2:	8d a1       	ldd	r24, Y+37	; 0x25
    13f4:	9e a1       	ldd	r25, Y+38	; 0x26
    13f6:	20 e0       	ldi	r18, 0x00	; 0
    13f8:	3f ef       	ldi	r19, 0xFF	; 255
    13fa:	4f e7       	ldi	r20, 0x7F	; 127
    13fc:	57 e4       	ldi	r21, 0x47	; 71
    13fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1402:	18 16       	cp	r1, r24
    1404:	4c f5       	brge	.+82     	; 0x1458 <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1406:	6f a1       	ldd	r22, Y+39	; 0x27
    1408:	78 a5       	ldd	r23, Y+40	; 0x28
    140a:	89 a5       	ldd	r24, Y+41	; 0x29
    140c:	9a a5       	ldd	r25, Y+42	; 0x2a
    140e:	20 e0       	ldi	r18, 0x00	; 0
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	40 e2       	ldi	r20, 0x20	; 32
    1414:	51 e4       	ldi	r21, 0x41	; 65
    1416:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    141a:	dc 01       	movw	r26, r24
    141c:	cb 01       	movw	r24, r22
    141e:	bc 01       	movw	r22, r24
    1420:	cd 01       	movw	r24, r26
    1422:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1426:	dc 01       	movw	r26, r24
    1428:	cb 01       	movw	r24, r22
    142a:	9a a3       	std	Y+34, r25	; 0x22
    142c:	89 a3       	std	Y+33, r24	; 0x21
    142e:	0f c0       	rjmp	.+30     	; 0x144e <LCD_sendCommand+0x1d6>
    1430:	89 e1       	ldi	r24, 0x19	; 25
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	98 a3       	std	Y+32, r25	; 0x20
    1436:	8f 8f       	std	Y+31, r24	; 0x1f
    1438:	8f 8d       	ldd	r24, Y+31	; 0x1f
    143a:	98 a1       	ldd	r25, Y+32	; 0x20
    143c:	01 97       	sbiw	r24, 0x01	; 1
    143e:	f1 f7       	brne	.-4      	; 0x143c <LCD_sendCommand+0x1c4>
    1440:	98 a3       	std	Y+32, r25	; 0x20
    1442:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1444:	89 a1       	ldd	r24, Y+33	; 0x21
    1446:	9a a1       	ldd	r25, Y+34	; 0x22
    1448:	01 97       	sbiw	r24, 0x01	; 1
    144a:	9a a3       	std	Y+34, r25	; 0x22
    144c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    144e:	89 a1       	ldd	r24, Y+33	; 0x21
    1450:	9a a1       	ldd	r25, Y+34	; 0x22
    1452:	00 97       	sbiw	r24, 0x00	; 0
    1454:	69 f7       	brne	.-38     	; 0x1430 <LCD_sendCommand+0x1b8>
    1456:	14 c0       	rjmp	.+40     	; 0x1480 <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1458:	6b a1       	ldd	r22, Y+35	; 0x23
    145a:	7c a1       	ldd	r23, Y+36	; 0x24
    145c:	8d a1       	ldd	r24, Y+37	; 0x25
    145e:	9e a1       	ldd	r25, Y+38	; 0x26
    1460:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1464:	dc 01       	movw	r26, r24
    1466:	cb 01       	movw	r24, r22
    1468:	9a a3       	std	Y+34, r25	; 0x22
    146a:	89 a3       	std	Y+33, r24	; 0x21
    146c:	89 a1       	ldd	r24, Y+33	; 0x21
    146e:	9a a1       	ldd	r25, Y+34	; 0x22
    1470:	9e 8f       	std	Y+30, r25	; 0x1e
    1472:	8d 8f       	std	Y+29, r24	; 0x1d
    1474:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1476:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1478:	01 97       	sbiw	r24, 0x01	; 1
    147a:	f1 f7       	brne	.-4      	; 0x1478 <LCD_sendCommand+0x200>
    147c:	9e 8f       	std	Y+30, r25	; 0x1e
    147e:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#elif (DATA_BITS_MODE == 8)
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
    1480:	e5 e3       	ldi	r30, 0x35	; 53
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	89 ad       	ldd	r24, Y+57	; 0x39
    1486:	80 83       	st	Z, r24
    1488:	80 e0       	ldi	r24, 0x00	; 0
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	a0 e8       	ldi	r26, 0x80	; 128
    148e:	bf e3       	ldi	r27, 0x3F	; 63
    1490:	89 8f       	std	Y+25, r24	; 0x19
    1492:	9a 8f       	std	Y+26, r25	; 0x1a
    1494:	ab 8f       	std	Y+27, r26	; 0x1b
    1496:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1498:	69 8d       	ldd	r22, Y+25	; 0x19
    149a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    149c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    149e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14a0:	20 e0       	ldi	r18, 0x00	; 0
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	4a e7       	ldi	r20, 0x7A	; 122
    14a6:	53 e4       	ldi	r21, 0x43	; 67
    14a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ac:	dc 01       	movw	r26, r24
    14ae:	cb 01       	movw	r24, r22
    14b0:	8d 8b       	std	Y+21, r24	; 0x15
    14b2:	9e 8b       	std	Y+22, r25	; 0x16
    14b4:	af 8b       	std	Y+23, r26	; 0x17
    14b6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    14b8:	6d 89       	ldd	r22, Y+21	; 0x15
    14ba:	7e 89       	ldd	r23, Y+22	; 0x16
    14bc:	8f 89       	ldd	r24, Y+23	; 0x17
    14be:	98 8d       	ldd	r25, Y+24	; 0x18
    14c0:	20 e0       	ldi	r18, 0x00	; 0
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	40 e8       	ldi	r20, 0x80	; 128
    14c6:	5f e3       	ldi	r21, 0x3F	; 63
    14c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14cc:	88 23       	and	r24, r24
    14ce:	2c f4       	brge	.+10     	; 0x14da <LCD_sendCommand+0x262>
		__ticks = 1;
    14d0:	81 e0       	ldi	r24, 0x01	; 1
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	9c 8b       	std	Y+20, r25	; 0x14
    14d6:	8b 8b       	std	Y+19, r24	; 0x13
    14d8:	3f c0       	rjmp	.+126    	; 0x1558 <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    14da:	6d 89       	ldd	r22, Y+21	; 0x15
    14dc:	7e 89       	ldd	r23, Y+22	; 0x16
    14de:	8f 89       	ldd	r24, Y+23	; 0x17
    14e0:	98 8d       	ldd	r25, Y+24	; 0x18
    14e2:	20 e0       	ldi	r18, 0x00	; 0
    14e4:	3f ef       	ldi	r19, 0xFF	; 255
    14e6:	4f e7       	ldi	r20, 0x7F	; 127
    14e8:	57 e4       	ldi	r21, 0x47	; 71
    14ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14ee:	18 16       	cp	r1, r24
    14f0:	4c f5       	brge	.+82     	; 0x1544 <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14f2:	69 8d       	ldd	r22, Y+25	; 0x19
    14f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14fa:	20 e0       	ldi	r18, 0x00	; 0
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	40 e2       	ldi	r20, 0x20	; 32
    1500:	51 e4       	ldi	r21, 0x41	; 65
    1502:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1506:	dc 01       	movw	r26, r24
    1508:	cb 01       	movw	r24, r22
    150a:	bc 01       	movw	r22, r24
    150c:	cd 01       	movw	r24, r26
    150e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1512:	dc 01       	movw	r26, r24
    1514:	cb 01       	movw	r24, r22
    1516:	9c 8b       	std	Y+20, r25	; 0x14
    1518:	8b 8b       	std	Y+19, r24	; 0x13
    151a:	0f c0       	rjmp	.+30     	; 0x153a <LCD_sendCommand+0x2c2>
    151c:	89 e1       	ldi	r24, 0x19	; 25
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	9a 8b       	std	Y+18, r25	; 0x12
    1522:	89 8b       	std	Y+17, r24	; 0x11
    1524:	89 89       	ldd	r24, Y+17	; 0x11
    1526:	9a 89       	ldd	r25, Y+18	; 0x12
    1528:	01 97       	sbiw	r24, 0x01	; 1
    152a:	f1 f7       	brne	.-4      	; 0x1528 <LCD_sendCommand+0x2b0>
    152c:	9a 8b       	std	Y+18, r25	; 0x12
    152e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1530:	8b 89       	ldd	r24, Y+19	; 0x13
    1532:	9c 89       	ldd	r25, Y+20	; 0x14
    1534:	01 97       	sbiw	r24, 0x01	; 1
    1536:	9c 8b       	std	Y+20, r25	; 0x14
    1538:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    153a:	8b 89       	ldd	r24, Y+19	; 0x13
    153c:	9c 89       	ldd	r25, Y+20	; 0x14
    153e:	00 97       	sbiw	r24, 0x00	; 0
    1540:	69 f7       	brne	.-38     	; 0x151c <LCD_sendCommand+0x2a4>
    1542:	14 c0       	rjmp	.+40     	; 0x156c <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1544:	6d 89       	ldd	r22, Y+21	; 0x15
    1546:	7e 89       	ldd	r23, Y+22	; 0x16
    1548:	8f 89       	ldd	r24, Y+23	; 0x17
    154a:	98 8d       	ldd	r25, Y+24	; 0x18
    154c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1550:	dc 01       	movw	r26, r24
    1552:	cb 01       	movw	r24, r22
    1554:	9c 8b       	std	Y+20, r25	; 0x14
    1556:	8b 8b       	std	Y+19, r24	; 0x13
    1558:	8b 89       	ldd	r24, Y+19	; 0x13
    155a:	9c 89       	ldd	r25, Y+20	; 0x14
    155c:	98 8b       	std	Y+16, r25	; 0x10
    155e:	8f 87       	std	Y+15, r24	; 0x0f
    1560:	8f 85       	ldd	r24, Y+15	; 0x0f
    1562:	98 89       	ldd	r25, Y+16	; 0x10
    1564:	01 97       	sbiw	r24, 0x01	; 1
    1566:	f1 f7       	brne	.-4      	; 0x1564 <LCD_sendCommand+0x2ec>
    1568:	98 8b       	std	Y+16, r25	; 0x10
    156a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    156c:	a2 e3       	ldi	r26, 0x32	; 50
    156e:	b0 e0       	ldi	r27, 0x00	; 0
    1570:	e2 e3       	ldi	r30, 0x32	; 50
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	8f 7b       	andi	r24, 0xBF	; 191
    1578:	8c 93       	st	X, r24
    157a:	80 e0       	ldi	r24, 0x00	; 0
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	a0 e8       	ldi	r26, 0x80	; 128
    1580:	bf e3       	ldi	r27, 0x3F	; 63
    1582:	8b 87       	std	Y+11, r24	; 0x0b
    1584:	9c 87       	std	Y+12, r25	; 0x0c
    1586:	ad 87       	std	Y+13, r26	; 0x0d
    1588:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    158a:	6b 85       	ldd	r22, Y+11	; 0x0b
    158c:	7c 85       	ldd	r23, Y+12	; 0x0c
    158e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1590:	9e 85       	ldd	r25, Y+14	; 0x0e
    1592:	20 e0       	ldi	r18, 0x00	; 0
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	4a e7       	ldi	r20, 0x7A	; 122
    1598:	53 e4       	ldi	r21, 0x43	; 67
    159a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    159e:	dc 01       	movw	r26, r24
    15a0:	cb 01       	movw	r24, r22
    15a2:	8f 83       	std	Y+7, r24	; 0x07
    15a4:	98 87       	std	Y+8, r25	; 0x08
    15a6:	a9 87       	std	Y+9, r26	; 0x09
    15a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15aa:	6f 81       	ldd	r22, Y+7	; 0x07
    15ac:	78 85       	ldd	r23, Y+8	; 0x08
    15ae:	89 85       	ldd	r24, Y+9	; 0x09
    15b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15b2:	20 e0       	ldi	r18, 0x00	; 0
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	40 e8       	ldi	r20, 0x80	; 128
    15b8:	5f e3       	ldi	r21, 0x3F	; 63
    15ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15be:	88 23       	and	r24, r24
    15c0:	2c f4       	brge	.+10     	; 0x15cc <LCD_sendCommand+0x354>
		__ticks = 1;
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	9e 83       	std	Y+6, r25	; 0x06
    15c8:	8d 83       	std	Y+5, r24	; 0x05
    15ca:	3f c0       	rjmp	.+126    	; 0x164a <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    15cc:	6f 81       	ldd	r22, Y+7	; 0x07
    15ce:	78 85       	ldd	r23, Y+8	; 0x08
    15d0:	89 85       	ldd	r24, Y+9	; 0x09
    15d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15d4:	20 e0       	ldi	r18, 0x00	; 0
    15d6:	3f ef       	ldi	r19, 0xFF	; 255
    15d8:	4f e7       	ldi	r20, 0x7F	; 127
    15da:	57 e4       	ldi	r21, 0x47	; 71
    15dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15e0:	18 16       	cp	r1, r24
    15e2:	4c f5       	brge	.+82     	; 0x1636 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    15e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    15e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    15ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	40 e2       	ldi	r20, 0x20	; 32
    15f2:	51 e4       	ldi	r21, 0x41	; 65
    15f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15f8:	dc 01       	movw	r26, r24
    15fa:	cb 01       	movw	r24, r22
    15fc:	bc 01       	movw	r22, r24
    15fe:	cd 01       	movw	r24, r26
    1600:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1604:	dc 01       	movw	r26, r24
    1606:	cb 01       	movw	r24, r22
    1608:	9e 83       	std	Y+6, r25	; 0x06
    160a:	8d 83       	std	Y+5, r24	; 0x05
    160c:	0f c0       	rjmp	.+30     	; 0x162c <LCD_sendCommand+0x3b4>
    160e:	89 e1       	ldi	r24, 0x19	; 25
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	9c 83       	std	Y+4, r25	; 0x04
    1614:	8b 83       	std	Y+3, r24	; 0x03
    1616:	8b 81       	ldd	r24, Y+3	; 0x03
    1618:	9c 81       	ldd	r25, Y+4	; 0x04
    161a:	01 97       	sbiw	r24, 0x01	; 1
    161c:	f1 f7       	brne	.-4      	; 0x161a <LCD_sendCommand+0x3a2>
    161e:	9c 83       	std	Y+4, r25	; 0x04
    1620:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1622:	8d 81       	ldd	r24, Y+5	; 0x05
    1624:	9e 81       	ldd	r25, Y+6	; 0x06
    1626:	01 97       	sbiw	r24, 0x01	; 1
    1628:	9e 83       	std	Y+6, r25	; 0x06
    162a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    162c:	8d 81       	ldd	r24, Y+5	; 0x05
    162e:	9e 81       	ldd	r25, Y+6	; 0x06
    1630:	00 97       	sbiw	r24, 0x00	; 0
    1632:	69 f7       	brne	.-38     	; 0x160e <LCD_sendCommand+0x396>
    1634:	14 c0       	rjmp	.+40     	; 0x165e <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1636:	6f 81       	ldd	r22, Y+7	; 0x07
    1638:	78 85       	ldd	r23, Y+8	; 0x08
    163a:	89 85       	ldd	r24, Y+9	; 0x09
    163c:	9a 85       	ldd	r25, Y+10	; 0x0a
    163e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1642:	dc 01       	movw	r26, r24
    1644:	cb 01       	movw	r24, r22
    1646:	9e 83       	std	Y+6, r25	; 0x06
    1648:	8d 83       	std	Y+5, r24	; 0x05
    164a:	8d 81       	ldd	r24, Y+5	; 0x05
    164c:	9e 81       	ldd	r25, Y+6	; 0x06
    164e:	9a 83       	std	Y+2, r25	; 0x02
    1650:	89 83       	std	Y+1, r24	; 0x01
    1652:	89 81       	ldd	r24, Y+1	; 0x01
    1654:	9a 81       	ldd	r25, Y+2	; 0x02
    1656:	01 97       	sbiw	r24, 0x01	; 1
    1658:	f1 f7       	brne	.-4      	; 0x1656 <LCD_sendCommand+0x3de>
    165a:	9a 83       	std	Y+2, r25	; 0x02
    165c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    165e:	e9 96       	adiw	r28, 0x39	; 57
    1660:	0f b6       	in	r0, 0x3f	; 63
    1662:	f8 94       	cli
    1664:	de bf       	out	0x3e, r29	; 62
    1666:	0f be       	out	0x3f, r0	; 63
    1668:	cd bf       	out	0x3d, r28	; 61
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	08 95       	ret

00001670 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    1670:	df 93       	push	r29
    1672:	cf 93       	push	r28
    1674:	cd b7       	in	r28, 0x3d	; 61
    1676:	de b7       	in	r29, 0x3e	; 62
    1678:	e9 97       	sbiw	r28, 0x39	; 57
    167a:	0f b6       	in	r0, 0x3f	; 63
    167c:	f8 94       	cli
    167e:	de bf       	out	0x3e, r29	; 62
    1680:	0f be       	out	0x3f, r0	; 63
    1682:	cd bf       	out	0x3d, r28	; 61
    1684:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    1686:	a2 e3       	ldi	r26, 0x32	; 50
    1688:	b0 e0       	ldi	r27, 0x00	; 0
    168a:	e2 e3       	ldi	r30, 0x32	; 50
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
    1690:	80 61       	ori	r24, 0x10	; 16
    1692:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1694:	a2 e3       	ldi	r26, 0x32	; 50
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	e2 e3       	ldi	r30, 0x32	; 50
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	8f 7d       	andi	r24, 0xDF	; 223
    16a0:	8c 93       	st	X, r24
    16a2:	80 e0       	ldi	r24, 0x00	; 0
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	a0 e8       	ldi	r26, 0x80	; 128
    16a8:	bf e3       	ldi	r27, 0x3F	; 63
    16aa:	8d ab       	std	Y+53, r24	; 0x35
    16ac:	9e ab       	std	Y+54, r25	; 0x36
    16ae:	af ab       	std	Y+55, r26	; 0x37
    16b0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16b2:	6d a9       	ldd	r22, Y+53	; 0x35
    16b4:	7e a9       	ldd	r23, Y+54	; 0x36
    16b6:	8f a9       	ldd	r24, Y+55	; 0x37
    16b8:	98 ad       	ldd	r25, Y+56	; 0x38
    16ba:	20 e0       	ldi	r18, 0x00	; 0
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	4a e7       	ldi	r20, 0x7A	; 122
    16c0:	53 e4       	ldi	r21, 0x43	; 67
    16c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16c6:	dc 01       	movw	r26, r24
    16c8:	cb 01       	movw	r24, r22
    16ca:	89 ab       	std	Y+49, r24	; 0x31
    16cc:	9a ab       	std	Y+50, r25	; 0x32
    16ce:	ab ab       	std	Y+51, r26	; 0x33
    16d0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    16d2:	69 a9       	ldd	r22, Y+49	; 0x31
    16d4:	7a a9       	ldd	r23, Y+50	; 0x32
    16d6:	8b a9       	ldd	r24, Y+51	; 0x33
    16d8:	9c a9       	ldd	r25, Y+52	; 0x34
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	40 e8       	ldi	r20, 0x80	; 128
    16e0:	5f e3       	ldi	r21, 0x3F	; 63
    16e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16e6:	88 23       	and	r24, r24
    16e8:	2c f4       	brge	.+10     	; 0x16f4 <LCD_displayCharacter+0x84>
		__ticks = 1;
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	98 ab       	std	Y+48, r25	; 0x30
    16f0:	8f a7       	std	Y+47, r24	; 0x2f
    16f2:	3f c0       	rjmp	.+126    	; 0x1772 <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    16f4:	69 a9       	ldd	r22, Y+49	; 0x31
    16f6:	7a a9       	ldd	r23, Y+50	; 0x32
    16f8:	8b a9       	ldd	r24, Y+51	; 0x33
    16fa:	9c a9       	ldd	r25, Y+52	; 0x34
    16fc:	20 e0       	ldi	r18, 0x00	; 0
    16fe:	3f ef       	ldi	r19, 0xFF	; 255
    1700:	4f e7       	ldi	r20, 0x7F	; 127
    1702:	57 e4       	ldi	r21, 0x47	; 71
    1704:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1708:	18 16       	cp	r1, r24
    170a:	4c f5       	brge	.+82     	; 0x175e <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    170c:	6d a9       	ldd	r22, Y+53	; 0x35
    170e:	7e a9       	ldd	r23, Y+54	; 0x36
    1710:	8f a9       	ldd	r24, Y+55	; 0x37
    1712:	98 ad       	ldd	r25, Y+56	; 0x38
    1714:	20 e0       	ldi	r18, 0x00	; 0
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	40 e2       	ldi	r20, 0x20	; 32
    171a:	51 e4       	ldi	r21, 0x41	; 65
    171c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1720:	dc 01       	movw	r26, r24
    1722:	cb 01       	movw	r24, r22
    1724:	bc 01       	movw	r22, r24
    1726:	cd 01       	movw	r24, r26
    1728:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    172c:	dc 01       	movw	r26, r24
    172e:	cb 01       	movw	r24, r22
    1730:	98 ab       	std	Y+48, r25	; 0x30
    1732:	8f a7       	std	Y+47, r24	; 0x2f
    1734:	0f c0       	rjmp	.+30     	; 0x1754 <LCD_displayCharacter+0xe4>
    1736:	89 e1       	ldi	r24, 0x19	; 25
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	9e a7       	std	Y+46, r25	; 0x2e
    173c:	8d a7       	std	Y+45, r24	; 0x2d
    173e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1740:	9e a5       	ldd	r25, Y+46	; 0x2e
    1742:	01 97       	sbiw	r24, 0x01	; 1
    1744:	f1 f7       	brne	.-4      	; 0x1742 <LCD_displayCharacter+0xd2>
    1746:	9e a7       	std	Y+46, r25	; 0x2e
    1748:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    174a:	8f a5       	ldd	r24, Y+47	; 0x2f
    174c:	98 a9       	ldd	r25, Y+48	; 0x30
    174e:	01 97       	sbiw	r24, 0x01	; 1
    1750:	98 ab       	std	Y+48, r25	; 0x30
    1752:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1754:	8f a5       	ldd	r24, Y+47	; 0x2f
    1756:	98 a9       	ldd	r25, Y+48	; 0x30
    1758:	00 97       	sbiw	r24, 0x00	; 0
    175a:	69 f7       	brne	.-38     	; 0x1736 <LCD_displayCharacter+0xc6>
    175c:	14 c0       	rjmp	.+40     	; 0x1786 <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    175e:	69 a9       	ldd	r22, Y+49	; 0x31
    1760:	7a a9       	ldd	r23, Y+50	; 0x32
    1762:	8b a9       	ldd	r24, Y+51	; 0x33
    1764:	9c a9       	ldd	r25, Y+52	; 0x34
    1766:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    176a:	dc 01       	movw	r26, r24
    176c:	cb 01       	movw	r24, r22
    176e:	98 ab       	std	Y+48, r25	; 0x30
    1770:	8f a7       	std	Y+47, r24	; 0x2f
    1772:	8f a5       	ldd	r24, Y+47	; 0x2f
    1774:	98 a9       	ldd	r25, Y+48	; 0x30
    1776:	9c a7       	std	Y+44, r25	; 0x2c
    1778:	8b a7       	std	Y+43, r24	; 0x2b
    177a:	8b a5       	ldd	r24, Y+43	; 0x2b
    177c:	9c a5       	ldd	r25, Y+44	; 0x2c
    177e:	01 97       	sbiw	r24, 0x01	; 1
    1780:	f1 f7       	brne	.-4      	; 0x177e <LCD_displayCharacter+0x10e>
    1782:	9c a7       	std	Y+44, r25	; 0x2c
    1784:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1786:	a2 e3       	ldi	r26, 0x32	; 50
    1788:	b0 e0       	ldi	r27, 0x00	; 0
    178a:	e2 e3       	ldi	r30, 0x32	; 50
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	80 81       	ld	r24, Z
    1790:	80 64       	ori	r24, 0x40	; 64
    1792:	8c 93       	st	X, r24
    1794:	80 e0       	ldi	r24, 0x00	; 0
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	a0 e8       	ldi	r26, 0x80	; 128
    179a:	bf e3       	ldi	r27, 0x3F	; 63
    179c:	8f a3       	std	Y+39, r24	; 0x27
    179e:	98 a7       	std	Y+40, r25	; 0x28
    17a0:	a9 a7       	std	Y+41, r26	; 0x29
    17a2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17a4:	6f a1       	ldd	r22, Y+39	; 0x27
    17a6:	78 a5       	ldd	r23, Y+40	; 0x28
    17a8:	89 a5       	ldd	r24, Y+41	; 0x29
    17aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    17ac:	20 e0       	ldi	r18, 0x00	; 0
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	4a e7       	ldi	r20, 0x7A	; 122
    17b2:	53 e4       	ldi	r21, 0x43	; 67
    17b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17b8:	dc 01       	movw	r26, r24
    17ba:	cb 01       	movw	r24, r22
    17bc:	8b a3       	std	Y+35, r24	; 0x23
    17be:	9c a3       	std	Y+36, r25	; 0x24
    17c0:	ad a3       	std	Y+37, r26	; 0x25
    17c2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17c4:	6b a1       	ldd	r22, Y+35	; 0x23
    17c6:	7c a1       	ldd	r23, Y+36	; 0x24
    17c8:	8d a1       	ldd	r24, Y+37	; 0x25
    17ca:	9e a1       	ldd	r25, Y+38	; 0x26
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	40 e8       	ldi	r20, 0x80	; 128
    17d2:	5f e3       	ldi	r21, 0x3F	; 63
    17d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17d8:	88 23       	and	r24, r24
    17da:	2c f4       	brge	.+10     	; 0x17e6 <LCD_displayCharacter+0x176>
		__ticks = 1;
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	9a a3       	std	Y+34, r25	; 0x22
    17e2:	89 a3       	std	Y+33, r24	; 0x21
    17e4:	3f c0       	rjmp	.+126    	; 0x1864 <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    17e6:	6b a1       	ldd	r22, Y+35	; 0x23
    17e8:	7c a1       	ldd	r23, Y+36	; 0x24
    17ea:	8d a1       	ldd	r24, Y+37	; 0x25
    17ec:	9e a1       	ldd	r25, Y+38	; 0x26
    17ee:	20 e0       	ldi	r18, 0x00	; 0
    17f0:	3f ef       	ldi	r19, 0xFF	; 255
    17f2:	4f e7       	ldi	r20, 0x7F	; 127
    17f4:	57 e4       	ldi	r21, 0x47	; 71
    17f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17fa:	18 16       	cp	r1, r24
    17fc:	4c f5       	brge	.+82     	; 0x1850 <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17fe:	6f a1       	ldd	r22, Y+39	; 0x27
    1800:	78 a5       	ldd	r23, Y+40	; 0x28
    1802:	89 a5       	ldd	r24, Y+41	; 0x29
    1804:	9a a5       	ldd	r25, Y+42	; 0x2a
    1806:	20 e0       	ldi	r18, 0x00	; 0
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	40 e2       	ldi	r20, 0x20	; 32
    180c:	51 e4       	ldi	r21, 0x41	; 65
    180e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1812:	dc 01       	movw	r26, r24
    1814:	cb 01       	movw	r24, r22
    1816:	bc 01       	movw	r22, r24
    1818:	cd 01       	movw	r24, r26
    181a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    181e:	dc 01       	movw	r26, r24
    1820:	cb 01       	movw	r24, r22
    1822:	9a a3       	std	Y+34, r25	; 0x22
    1824:	89 a3       	std	Y+33, r24	; 0x21
    1826:	0f c0       	rjmp	.+30     	; 0x1846 <LCD_displayCharacter+0x1d6>
    1828:	89 e1       	ldi	r24, 0x19	; 25
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	98 a3       	std	Y+32, r25	; 0x20
    182e:	8f 8f       	std	Y+31, r24	; 0x1f
    1830:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1832:	98 a1       	ldd	r25, Y+32	; 0x20
    1834:	01 97       	sbiw	r24, 0x01	; 1
    1836:	f1 f7       	brne	.-4      	; 0x1834 <LCD_displayCharacter+0x1c4>
    1838:	98 a3       	std	Y+32, r25	; 0x20
    183a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    183c:	89 a1       	ldd	r24, Y+33	; 0x21
    183e:	9a a1       	ldd	r25, Y+34	; 0x22
    1840:	01 97       	sbiw	r24, 0x01	; 1
    1842:	9a a3       	std	Y+34, r25	; 0x22
    1844:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1846:	89 a1       	ldd	r24, Y+33	; 0x21
    1848:	9a a1       	ldd	r25, Y+34	; 0x22
    184a:	00 97       	sbiw	r24, 0x00	; 0
    184c:	69 f7       	brne	.-38     	; 0x1828 <LCD_displayCharacter+0x1b8>
    184e:	14 c0       	rjmp	.+40     	; 0x1878 <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1850:	6b a1       	ldd	r22, Y+35	; 0x23
    1852:	7c a1       	ldd	r23, Y+36	; 0x24
    1854:	8d a1       	ldd	r24, Y+37	; 0x25
    1856:	9e a1       	ldd	r25, Y+38	; 0x26
    1858:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    185c:	dc 01       	movw	r26, r24
    185e:	cb 01       	movw	r24, r22
    1860:	9a a3       	std	Y+34, r25	; 0x22
    1862:	89 a3       	std	Y+33, r24	; 0x21
    1864:	89 a1       	ldd	r24, Y+33	; 0x21
    1866:	9a a1       	ldd	r25, Y+34	; 0x22
    1868:	9e 8f       	std	Y+30, r25	; 0x1e
    186a:	8d 8f       	std	Y+29, r24	; 0x1d
    186c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    186e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1870:	01 97       	sbiw	r24, 0x01	; 1
    1872:	f1 f7       	brne	.-4      	; 0x1870 <LCD_displayCharacter+0x200>
    1874:	9e 8f       	std	Y+30, r25	; 0x1e
    1876:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#elif (DATA_BITS_MODE == 8)
	LCD_DATA_PORT = data; /* out the required command to the data bus D0 --> D7 */
    1878:	e5 e3       	ldi	r30, 0x35	; 53
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	89 ad       	ldd	r24, Y+57	; 0x39
    187e:	80 83       	st	Z, r24
    1880:	80 e0       	ldi	r24, 0x00	; 0
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	a0 e8       	ldi	r26, 0x80	; 128
    1886:	bf e3       	ldi	r27, 0x3F	; 63
    1888:	89 8f       	std	Y+25, r24	; 0x19
    188a:	9a 8f       	std	Y+26, r25	; 0x1a
    188c:	ab 8f       	std	Y+27, r26	; 0x1b
    188e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1890:	69 8d       	ldd	r22, Y+25	; 0x19
    1892:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1894:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1896:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1898:	20 e0       	ldi	r18, 0x00	; 0
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	4a e7       	ldi	r20, 0x7A	; 122
    189e:	53 e4       	ldi	r21, 0x43	; 67
    18a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18a4:	dc 01       	movw	r26, r24
    18a6:	cb 01       	movw	r24, r22
    18a8:	8d 8b       	std	Y+21, r24	; 0x15
    18aa:	9e 8b       	std	Y+22, r25	; 0x16
    18ac:	af 8b       	std	Y+23, r26	; 0x17
    18ae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18b0:	6d 89       	ldd	r22, Y+21	; 0x15
    18b2:	7e 89       	ldd	r23, Y+22	; 0x16
    18b4:	8f 89       	ldd	r24, Y+23	; 0x17
    18b6:	98 8d       	ldd	r25, Y+24	; 0x18
    18b8:	20 e0       	ldi	r18, 0x00	; 0
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	40 e8       	ldi	r20, 0x80	; 128
    18be:	5f e3       	ldi	r21, 0x3F	; 63
    18c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18c4:	88 23       	and	r24, r24
    18c6:	2c f4       	brge	.+10     	; 0x18d2 <LCD_displayCharacter+0x262>
		__ticks = 1;
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	9c 8b       	std	Y+20, r25	; 0x14
    18ce:	8b 8b       	std	Y+19, r24	; 0x13
    18d0:	3f c0       	rjmp	.+126    	; 0x1950 <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    18d2:	6d 89       	ldd	r22, Y+21	; 0x15
    18d4:	7e 89       	ldd	r23, Y+22	; 0x16
    18d6:	8f 89       	ldd	r24, Y+23	; 0x17
    18d8:	98 8d       	ldd	r25, Y+24	; 0x18
    18da:	20 e0       	ldi	r18, 0x00	; 0
    18dc:	3f ef       	ldi	r19, 0xFF	; 255
    18de:	4f e7       	ldi	r20, 0x7F	; 127
    18e0:	57 e4       	ldi	r21, 0x47	; 71
    18e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18e6:	18 16       	cp	r1, r24
    18e8:	4c f5       	brge	.+82     	; 0x193c <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ea:	69 8d       	ldd	r22, Y+25	; 0x19
    18ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18f2:	20 e0       	ldi	r18, 0x00	; 0
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	40 e2       	ldi	r20, 0x20	; 32
    18f8:	51 e4       	ldi	r21, 0x41	; 65
    18fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18fe:	dc 01       	movw	r26, r24
    1900:	cb 01       	movw	r24, r22
    1902:	bc 01       	movw	r22, r24
    1904:	cd 01       	movw	r24, r26
    1906:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    190a:	dc 01       	movw	r26, r24
    190c:	cb 01       	movw	r24, r22
    190e:	9c 8b       	std	Y+20, r25	; 0x14
    1910:	8b 8b       	std	Y+19, r24	; 0x13
    1912:	0f c0       	rjmp	.+30     	; 0x1932 <LCD_displayCharacter+0x2c2>
    1914:	89 e1       	ldi	r24, 0x19	; 25
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	9a 8b       	std	Y+18, r25	; 0x12
    191a:	89 8b       	std	Y+17, r24	; 0x11
    191c:	89 89       	ldd	r24, Y+17	; 0x11
    191e:	9a 89       	ldd	r25, Y+18	; 0x12
    1920:	01 97       	sbiw	r24, 0x01	; 1
    1922:	f1 f7       	brne	.-4      	; 0x1920 <LCD_displayCharacter+0x2b0>
    1924:	9a 8b       	std	Y+18, r25	; 0x12
    1926:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1928:	8b 89       	ldd	r24, Y+19	; 0x13
    192a:	9c 89       	ldd	r25, Y+20	; 0x14
    192c:	01 97       	sbiw	r24, 0x01	; 1
    192e:	9c 8b       	std	Y+20, r25	; 0x14
    1930:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1932:	8b 89       	ldd	r24, Y+19	; 0x13
    1934:	9c 89       	ldd	r25, Y+20	; 0x14
    1936:	00 97       	sbiw	r24, 0x00	; 0
    1938:	69 f7       	brne	.-38     	; 0x1914 <LCD_displayCharacter+0x2a4>
    193a:	14 c0       	rjmp	.+40     	; 0x1964 <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    193c:	6d 89       	ldd	r22, Y+21	; 0x15
    193e:	7e 89       	ldd	r23, Y+22	; 0x16
    1940:	8f 89       	ldd	r24, Y+23	; 0x17
    1942:	98 8d       	ldd	r25, Y+24	; 0x18
    1944:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1948:	dc 01       	movw	r26, r24
    194a:	cb 01       	movw	r24, r22
    194c:	9c 8b       	std	Y+20, r25	; 0x14
    194e:	8b 8b       	std	Y+19, r24	; 0x13
    1950:	8b 89       	ldd	r24, Y+19	; 0x13
    1952:	9c 89       	ldd	r25, Y+20	; 0x14
    1954:	98 8b       	std	Y+16, r25	; 0x10
    1956:	8f 87       	std	Y+15, r24	; 0x0f
    1958:	8f 85       	ldd	r24, Y+15	; 0x0f
    195a:	98 89       	ldd	r25, Y+16	; 0x10
    195c:	01 97       	sbiw	r24, 0x01	; 1
    195e:	f1 f7       	brne	.-4      	; 0x195c <LCD_displayCharacter+0x2ec>
    1960:	98 8b       	std	Y+16, r25	; 0x10
    1962:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1964:	a2 e3       	ldi	r26, 0x32	; 50
    1966:	b0 e0       	ldi	r27, 0x00	; 0
    1968:	e2 e3       	ldi	r30, 0x32	; 50
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	80 81       	ld	r24, Z
    196e:	8f 7b       	andi	r24, 0xBF	; 191
    1970:	8c 93       	st	X, r24
    1972:	80 e0       	ldi	r24, 0x00	; 0
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	a0 e8       	ldi	r26, 0x80	; 128
    1978:	bf e3       	ldi	r27, 0x3F	; 63
    197a:	8b 87       	std	Y+11, r24	; 0x0b
    197c:	9c 87       	std	Y+12, r25	; 0x0c
    197e:	ad 87       	std	Y+13, r26	; 0x0d
    1980:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1982:	6b 85       	ldd	r22, Y+11	; 0x0b
    1984:	7c 85       	ldd	r23, Y+12	; 0x0c
    1986:	8d 85       	ldd	r24, Y+13	; 0x0d
    1988:	9e 85       	ldd	r25, Y+14	; 0x0e
    198a:	20 e0       	ldi	r18, 0x00	; 0
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	4a e7       	ldi	r20, 0x7A	; 122
    1990:	53 e4       	ldi	r21, 0x43	; 67
    1992:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1996:	dc 01       	movw	r26, r24
    1998:	cb 01       	movw	r24, r22
    199a:	8f 83       	std	Y+7, r24	; 0x07
    199c:	98 87       	std	Y+8, r25	; 0x08
    199e:	a9 87       	std	Y+9, r26	; 0x09
    19a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19a2:	6f 81       	ldd	r22, Y+7	; 0x07
    19a4:	78 85       	ldd	r23, Y+8	; 0x08
    19a6:	89 85       	ldd	r24, Y+9	; 0x09
    19a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19aa:	20 e0       	ldi	r18, 0x00	; 0
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	40 e8       	ldi	r20, 0x80	; 128
    19b0:	5f e3       	ldi	r21, 0x3F	; 63
    19b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19b6:	88 23       	and	r24, r24
    19b8:	2c f4       	brge	.+10     	; 0x19c4 <LCD_displayCharacter+0x354>
		__ticks = 1;
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	9e 83       	std	Y+6, r25	; 0x06
    19c0:	8d 83       	std	Y+5, r24	; 0x05
    19c2:	3f c0       	rjmp	.+126    	; 0x1a42 <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    19c4:	6f 81       	ldd	r22, Y+7	; 0x07
    19c6:	78 85       	ldd	r23, Y+8	; 0x08
    19c8:	89 85       	ldd	r24, Y+9	; 0x09
    19ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    19cc:	20 e0       	ldi	r18, 0x00	; 0
    19ce:	3f ef       	ldi	r19, 0xFF	; 255
    19d0:	4f e7       	ldi	r20, 0x7F	; 127
    19d2:	57 e4       	ldi	r21, 0x47	; 71
    19d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19d8:	18 16       	cp	r1, r24
    19da:	4c f5       	brge	.+82     	; 0x1a2e <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    19de:	7c 85       	ldd	r23, Y+12	; 0x0c
    19e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    19e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    19e4:	20 e0       	ldi	r18, 0x00	; 0
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	40 e2       	ldi	r20, 0x20	; 32
    19ea:	51 e4       	ldi	r21, 0x41	; 65
    19ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f0:	dc 01       	movw	r26, r24
    19f2:	cb 01       	movw	r24, r22
    19f4:	bc 01       	movw	r22, r24
    19f6:	cd 01       	movw	r24, r26
    19f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19fc:	dc 01       	movw	r26, r24
    19fe:	cb 01       	movw	r24, r22
    1a00:	9e 83       	std	Y+6, r25	; 0x06
    1a02:	8d 83       	std	Y+5, r24	; 0x05
    1a04:	0f c0       	rjmp	.+30     	; 0x1a24 <LCD_displayCharacter+0x3b4>
    1a06:	89 e1       	ldi	r24, 0x19	; 25
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	9c 83       	std	Y+4, r25	; 0x04
    1a0c:	8b 83       	std	Y+3, r24	; 0x03
    1a0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a10:	9c 81       	ldd	r25, Y+4	; 0x04
    1a12:	01 97       	sbiw	r24, 0x01	; 1
    1a14:	f1 f7       	brne	.-4      	; 0x1a12 <LCD_displayCharacter+0x3a2>
    1a16:	9c 83       	std	Y+4, r25	; 0x04
    1a18:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a1e:	01 97       	sbiw	r24, 0x01	; 1
    1a20:	9e 83       	std	Y+6, r25	; 0x06
    1a22:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a24:	8d 81       	ldd	r24, Y+5	; 0x05
    1a26:	9e 81       	ldd	r25, Y+6	; 0x06
    1a28:	00 97       	sbiw	r24, 0x00	; 0
    1a2a:	69 f7       	brne	.-38     	; 0x1a06 <LCD_displayCharacter+0x396>
    1a2c:	14 c0       	rjmp	.+40     	; 0x1a56 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a2e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a30:	78 85       	ldd	r23, Y+8	; 0x08
    1a32:	89 85       	ldd	r24, Y+9	; 0x09
    1a34:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	cb 01       	movw	r24, r22
    1a3e:	9e 83       	std	Y+6, r25	; 0x06
    1a40:	8d 83       	std	Y+5, r24	; 0x05
    1a42:	8d 81       	ldd	r24, Y+5	; 0x05
    1a44:	9e 81       	ldd	r25, Y+6	; 0x06
    1a46:	9a 83       	std	Y+2, r25	; 0x02
    1a48:	89 83       	std	Y+1, r24	; 0x01
    1a4a:	89 81       	ldd	r24, Y+1	; 0x01
    1a4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a4e:	01 97       	sbiw	r24, 0x01	; 1
    1a50:	f1 f7       	brne	.-4      	; 0x1a4e <LCD_displayCharacter+0x3de>
    1a52:	9a 83       	std	Y+2, r25	; 0x02
    1a54:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1a56:	e9 96       	adiw	r28, 0x39	; 57
    1a58:	0f b6       	in	r0, 0x3f	; 63
    1a5a:	f8 94       	cli
    1a5c:	de bf       	out	0x3e, r29	; 62
    1a5e:	0f be       	out	0x3f, r0	; 63
    1a60:	cd bf       	out	0x3d, r28	; 61
    1a62:	cf 91       	pop	r28
    1a64:	df 91       	pop	r29
    1a66:	08 95       	ret

00001a68 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    1a68:	df 93       	push	r29
    1a6a:	cf 93       	push	r28
    1a6c:	00 d0       	rcall	.+0      	; 0x1a6e <LCD_displayString+0x6>
    1a6e:	0f 92       	push	r0
    1a70:	cd b7       	in	r28, 0x3d	; 61
    1a72:	de b7       	in	r29, 0x3e	; 62
    1a74:	9b 83       	std	Y+3, r25	; 0x03
    1a76:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1a78:	19 82       	std	Y+1, r1	; 0x01
    1a7a:	0e c0       	rjmp	.+28     	; 0x1a98 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1a7c:	89 81       	ldd	r24, Y+1	; 0x01
    1a7e:	28 2f       	mov	r18, r24
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	8a 81       	ldd	r24, Y+2	; 0x02
    1a84:	9b 81       	ldd	r25, Y+3	; 0x03
    1a86:	fc 01       	movw	r30, r24
    1a88:	e2 0f       	add	r30, r18
    1a8a:	f3 1f       	adc	r31, r19
    1a8c:	80 81       	ld	r24, Z
    1a8e:	0e 94 38 0b 	call	0x1670	; 0x1670 <LCD_displayCharacter>
		i++;
    1a92:	89 81       	ldd	r24, Y+1	; 0x01
    1a94:	8f 5f       	subi	r24, 0xFF	; 255
    1a96:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1a98:	89 81       	ldd	r24, Y+1	; 0x01
    1a9a:	28 2f       	mov	r18, r24
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa0:	9b 81       	ldd	r25, Y+3	; 0x03
    1aa2:	fc 01       	movw	r30, r24
    1aa4:	e2 0f       	add	r30, r18
    1aa6:	f3 1f       	adc	r31, r19
    1aa8:	80 81       	ld	r24, Z
    1aaa:	88 23       	and	r24, r24
    1aac:	39 f7       	brne	.-50     	; 0x1a7c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1aae:	0f 90       	pop	r0
    1ab0:	0f 90       	pop	r0
    1ab2:	0f 90       	pop	r0
    1ab4:	cf 91       	pop	r28
    1ab6:	df 91       	pop	r29
    1ab8:	08 95       	ret

00001aba <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    1aba:	df 93       	push	r29
    1abc:	cf 93       	push	r28
    1abe:	00 d0       	rcall	.+0      	; 0x1ac0 <LCD_goToRowColumn+0x6>
    1ac0:	00 d0       	rcall	.+0      	; 0x1ac2 <LCD_goToRowColumn+0x8>
    1ac2:	0f 92       	push	r0
    1ac4:	cd b7       	in	r28, 0x3d	; 61
    1ac6:	de b7       	in	r29, 0x3e	; 62
    1ac8:	8a 83       	std	Y+2, r24	; 0x02
    1aca:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    1acc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ace:	28 2f       	mov	r18, r24
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	3d 83       	std	Y+5, r19	; 0x05
    1ad4:	2c 83       	std	Y+4, r18	; 0x04
    1ad6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ad8:	9d 81       	ldd	r25, Y+5	; 0x05
    1ada:	81 30       	cpi	r24, 0x01	; 1
    1adc:	91 05       	cpc	r25, r1
    1ade:	c1 f0       	breq	.+48     	; 0x1b10 <LCD_goToRowColumn+0x56>
    1ae0:	2c 81       	ldd	r18, Y+4	; 0x04
    1ae2:	3d 81       	ldd	r19, Y+5	; 0x05
    1ae4:	22 30       	cpi	r18, 0x02	; 2
    1ae6:	31 05       	cpc	r19, r1
    1ae8:	2c f4       	brge	.+10     	; 0x1af4 <LCD_goToRowColumn+0x3a>
    1aea:	8c 81       	ldd	r24, Y+4	; 0x04
    1aec:	9d 81       	ldd	r25, Y+5	; 0x05
    1aee:	00 97       	sbiw	r24, 0x00	; 0
    1af0:	61 f0       	breq	.+24     	; 0x1b0a <LCD_goToRowColumn+0x50>
    1af2:	19 c0       	rjmp	.+50     	; 0x1b26 <LCD_goToRowColumn+0x6c>
    1af4:	2c 81       	ldd	r18, Y+4	; 0x04
    1af6:	3d 81       	ldd	r19, Y+5	; 0x05
    1af8:	22 30       	cpi	r18, 0x02	; 2
    1afa:	31 05       	cpc	r19, r1
    1afc:	69 f0       	breq	.+26     	; 0x1b18 <LCD_goToRowColumn+0x5e>
    1afe:	8c 81       	ldd	r24, Y+4	; 0x04
    1b00:	9d 81       	ldd	r25, Y+5	; 0x05
    1b02:	83 30       	cpi	r24, 0x03	; 3
    1b04:	91 05       	cpc	r25, r1
    1b06:	61 f0       	breq	.+24     	; 0x1b20 <LCD_goToRowColumn+0x66>
    1b08:	0e c0       	rjmp	.+28     	; 0x1b26 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    1b0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0c:	89 83       	std	Y+1, r24	; 0x01
    1b0e:	0b c0       	rjmp	.+22     	; 0x1b26 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    1b10:	8b 81       	ldd	r24, Y+3	; 0x03
    1b12:	80 5c       	subi	r24, 0xC0	; 192
    1b14:	89 83       	std	Y+1, r24	; 0x01
    1b16:	07 c0       	rjmp	.+14     	; 0x1b26 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    1b18:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1a:	80 5f       	subi	r24, 0xF0	; 240
    1b1c:	89 83       	std	Y+1, r24	; 0x01
    1b1e:	03 c0       	rjmp	.+6      	; 0x1b26 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    1b20:	8b 81       	ldd	r24, Y+3	; 0x03
    1b22:	80 5b       	subi	r24, 0xB0	; 176
    1b24:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    1b26:	89 81       	ldd	r24, Y+1	; 0x01
    1b28:	80 68       	ori	r24, 0x80	; 128
    1b2a:	0e 94 3c 09 	call	0x1278	; 0x1278 <LCD_sendCommand>
}
    1b2e:	0f 90       	pop	r0
    1b30:	0f 90       	pop	r0
    1b32:	0f 90       	pop	r0
    1b34:	0f 90       	pop	r0
    1b36:	0f 90       	pop	r0
    1b38:	cf 91       	pop	r28
    1b3a:	df 91       	pop	r29
    1b3c:	08 95       	ret

00001b3e <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1b3e:	df 93       	push	r29
    1b40:	cf 93       	push	r28
    1b42:	00 d0       	rcall	.+0      	; 0x1b44 <LCD_displayStringRowColumn+0x6>
    1b44:	00 d0       	rcall	.+0      	; 0x1b46 <LCD_displayStringRowColumn+0x8>
    1b46:	cd b7       	in	r28, 0x3d	; 61
    1b48:	de b7       	in	r29, 0x3e	; 62
    1b4a:	89 83       	std	Y+1, r24	; 0x01
    1b4c:	6a 83       	std	Y+2, r22	; 0x02
    1b4e:	5c 83       	std	Y+4, r21	; 0x04
    1b50:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    1b52:	89 81       	ldd	r24, Y+1	; 0x01
    1b54:	6a 81       	ldd	r22, Y+2	; 0x02
    1b56:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    1b5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b5e:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <LCD_displayString>
}
    1b62:	0f 90       	pop	r0
    1b64:	0f 90       	pop	r0
    1b66:	0f 90       	pop	r0
    1b68:	0f 90       	pop	r0
    1b6a:	cf 91       	pop	r28
    1b6c:	df 91       	pop	r29
    1b6e:	08 95       	ret

00001b70 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    1b70:	df 93       	push	r29
    1b72:	cf 93       	push	r28
    1b74:	cd b7       	in	r28, 0x3d	; 61
    1b76:	de b7       	in	r29, 0x3e	; 62
    1b78:	62 97       	sbiw	r28, 0x12	; 18
    1b7a:	0f b6       	in	r0, 0x3f	; 63
    1b7c:	f8 94       	cli
    1b7e:	de bf       	out	0x3e, r29	; 62
    1b80:	0f be       	out	0x3f, r0	; 63
    1b82:	cd bf       	out	0x3d, r28	; 61
    1b84:	9a 8b       	std	Y+18, r25	; 0x12
    1b86:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    1b88:	89 89       	ldd	r24, Y+17	; 0x11
    1b8a:	9a 89       	ldd	r25, Y+18	; 0x12
    1b8c:	9e 01       	movw	r18, r28
    1b8e:	2f 5f       	subi	r18, 0xFF	; 255
    1b90:	3f 4f       	sbci	r19, 0xFF	; 255
    1b92:	b9 01       	movw	r22, r18
    1b94:	4a e0       	ldi	r20, 0x0A	; 10
    1b96:	50 e0       	ldi	r21, 0x00	; 0
    1b98:	0e 94 3c 12 	call	0x2478	; 0x2478 <itoa>
   LCD_displayString(buff);
    1b9c:	ce 01       	movw	r24, r28
    1b9e:	01 96       	adiw	r24, 0x01	; 1
    1ba0:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <LCD_displayString>
}
    1ba4:	62 96       	adiw	r28, 0x12	; 18
    1ba6:	0f b6       	in	r0, 0x3f	; 63
    1ba8:	f8 94       	cli
    1baa:	de bf       	out	0x3e, r29	; 62
    1bac:	0f be       	out	0x3f, r0	; 63
    1bae:	cd bf       	out	0x3d, r28	; 61
    1bb0:	cf 91       	pop	r28
    1bb2:	df 91       	pop	r29
    1bb4:	08 95       	ret

00001bb6 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    1bb6:	df 93       	push	r29
    1bb8:	cf 93       	push	r28
    1bba:	cd b7       	in	r28, 0x3d	; 61
    1bbc:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
    1bc0:	0e 94 3c 09 	call	0x1278	; 0x1278 <LCD_sendCommand>
}
    1bc4:	cf 91       	pop	r28
    1bc6:	df 91       	pop	r29
    1bc8:	08 95       	ret

00001bca <confirm>:
 */
#include"external_eeprom.h"
#include"uart.h"
#include"lcd.h"
#define M2_READY 0x10
char confirm(){
    1bca:	df 93       	push	r29
    1bcc:	cf 93       	push	r28
    1bce:	00 d0       	rcall	.+0      	; 0x1bd0 <confirm+0x6>
    1bd0:	00 d0       	rcall	.+0      	; 0x1bd2 <confirm+0x8>
    1bd2:	00 d0       	rcall	.+0      	; 0x1bd4 <confirm+0xa>
    1bd4:	cd b7       	in	r28, 0x3d	; 61
    1bd6:	de b7       	in	r29, 0x3e	; 62
		uint8 Str2[3];

		uint8 eeprom_read[2];
	while(UART_recieveByte() != 0x22){}
    1bd8:	0e 94 8a 11 	call	0x2314	; 0x2314 <UART_recieveByte>
    1bdc:	82 32       	cpi	r24, 0x22	; 34
    1bde:	e1 f7       	brne	.-8      	; 0x1bd8 <confirm+0xe>
					UART_sendByte(0x20); // MC2 is ready
    1be0:	80 e2       	ldi	r24, 0x20	; 32
    1be2:	0e 94 73 11 	call	0x22e6	; 0x22e6 <UART_sendByte>
					UART_receiveString(Str2); // receive the string
    1be6:	ce 01       	movw	r24, r28
    1be8:	01 96       	adiw	r24, 0x01	; 1
    1bea:	0e 94 c2 11 	call	0x2384	; 0x2384 <UART_receiveString>
					//LCD_clearScreen();
					//LCD_intgerToString(Str2[1]);



		EEPROM_readByte(0x0311,&eeprom_read[0]);
    1bee:	9e 01       	movw	r18, r28
    1bf0:	2c 5f       	subi	r18, 0xFC	; 252
    1bf2:	3f 4f       	sbci	r19, 0xFF	; 255
    1bf4:	81 e1       	ldi	r24, 0x11	; 17
    1bf6:	93 e0       	ldi	r25, 0x03	; 3
    1bf8:	b9 01       	movw	r22, r18
    1bfa:	0e 94 67 06 	call	0xcce	; 0xcce <EEPROM_readByte>
		//EEPROM_readByte(0x0315,&eeprom_read[1]);
		UART_sendByte(0x30);
    1bfe:	80 e3       	ldi	r24, 0x30	; 48
    1c00:	0e 94 73 11 	call	0x22e6	; 0x22e6 <UART_sendByte>
		while(UART_recieveByte() != 0x33){}
    1c04:	0e 94 8a 11 	call	0x2314	; 0x2314 <UART_recieveByte>
    1c08:	83 33       	cpi	r24, 0x33	; 51
    1c0a:	e1 f7       	brne	.-8      	; 0x1c04 <confirm+0x3a>

		if(eeprom_read[0]==Str2[1] ){
    1c0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c10:	98 17       	cp	r25, r24
    1c12:	31 f4       	brne	.+12     	; 0x1c20 <confirm+0x56>
			UART_sendByte('1');
    1c14:	81 e3       	ldi	r24, 0x31	; 49
    1c16:	0e 94 73 11 	call	0x22e6	; 0x22e6 <UART_sendByte>
return '1';
    1c1a:	81 e3       	ldi	r24, 0x31	; 49
    1c1c:	8e 83       	std	Y+6, r24	; 0x06
    1c1e:	05 c0       	rjmp	.+10     	; 0x1c2a <confirm+0x60>

		}
		else{
			UART_sendByte('0');
    1c20:	80 e3       	ldi	r24, 0x30	; 48
    1c22:	0e 94 73 11 	call	0x22e6	; 0x22e6 <UART_sendByte>
return '0';
    1c26:	80 e3       	ldi	r24, 0x30	; 48
    1c28:	8e 83       	std	Y+6, r24	; 0x06
    1c2a:	8e 81       	ldd	r24, Y+6	; 0x06

		}

}
    1c2c:	26 96       	adiw	r28, 0x06	; 6
    1c2e:	0f b6       	in	r0, 0x3f	; 63
    1c30:	f8 94       	cli
    1c32:	de bf       	out	0x3e, r29	; 62
    1c34:	0f be       	out	0x3f, r0	; 63
    1c36:	cd bf       	out	0x3d, r28	; 61
    1c38:	cf 91       	pop	r28
    1c3a:	df 91       	pop	r29
    1c3c:	08 95       	ret

00001c3e <get_action>:
void get_action(){
    1c3e:	df 93       	push	r29
    1c40:	cf 93       	push	r28
    1c42:	cd b7       	in	r28, 0x3d	; 61
    1c44:	de b7       	in	r29, 0x3e	; 62
    1c46:	2e 97       	sbiw	r28, 0x0e	; 14
    1c48:	0f b6       	in	r0, 0x3f	; 63
    1c4a:	f8 94       	cli
    1c4c:	de bf       	out	0x3e, r29	; 62
    1c4e:	0f be       	out	0x3f, r0	; 63
    1c50:	cd bf       	out	0x3d, r28	; 61

			PORTA|=(1<<0);
    1c52:	ab e3       	ldi	r26, 0x3B	; 59
    1c54:	b0 e0       	ldi	r27, 0x00	; 0
    1c56:	eb e3       	ldi	r30, 0x3B	; 59
    1c58:	f0 e0       	ldi	r31, 0x00	; 0
    1c5a:	80 81       	ld	r24, Z
    1c5c:	81 60       	ori	r24, 0x01	; 1
    1c5e:	8c 93       	st	X, r24
			PORTA&=~(1<<1);
    1c60:	ab e3       	ldi	r26, 0x3B	; 59
    1c62:	b0 e0       	ldi	r27, 0x00	; 0
    1c64:	eb e3       	ldi	r30, 0x3B	; 59
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	80 81       	ld	r24, Z
    1c6a:	8d 7f       	andi	r24, 0xFD	; 253
    1c6c:	8c 93       	st	X, r24
    1c6e:	80 e0       	ldi	r24, 0x00	; 0
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	aa e7       	ldi	r26, 0x7A	; 122
    1c74:	b5 e4       	ldi	r27, 0x45	; 69
    1c76:	8b 87       	std	Y+11, r24	; 0x0b
    1c78:	9c 87       	std	Y+12, r25	; 0x0c
    1c7a:	ad 87       	std	Y+13, r26	; 0x0d
    1c7c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c80:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c82:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c84:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c86:	20 e0       	ldi	r18, 0x00	; 0
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	4a e7       	ldi	r20, 0x7A	; 122
    1c8c:	53 e4       	ldi	r21, 0x43	; 67
    1c8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c92:	dc 01       	movw	r26, r24
    1c94:	cb 01       	movw	r24, r22
    1c96:	8f 83       	std	Y+7, r24	; 0x07
    1c98:	98 87       	std	Y+8, r25	; 0x08
    1c9a:	a9 87       	std	Y+9, r26	; 0x09
    1c9c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1ca0:	78 85       	ldd	r23, Y+8	; 0x08
    1ca2:	89 85       	ldd	r24, Y+9	; 0x09
    1ca4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	40 e8       	ldi	r20, 0x80	; 128
    1cac:	5f e3       	ldi	r21, 0x3F	; 63
    1cae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cb2:	88 23       	and	r24, r24
    1cb4:	2c f4       	brge	.+10     	; 0x1cc0 <get_action+0x82>
		__ticks = 1;
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	9e 83       	std	Y+6, r25	; 0x06
    1cbc:	8d 83       	std	Y+5, r24	; 0x05
    1cbe:	3f c0       	rjmp	.+126    	; 0x1d3e <get_action+0x100>
	else if (__tmp > 65535)
    1cc0:	6f 81       	ldd	r22, Y+7	; 0x07
    1cc2:	78 85       	ldd	r23, Y+8	; 0x08
    1cc4:	89 85       	ldd	r24, Y+9	; 0x09
    1cc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cc8:	20 e0       	ldi	r18, 0x00	; 0
    1cca:	3f ef       	ldi	r19, 0xFF	; 255
    1ccc:	4f e7       	ldi	r20, 0x7F	; 127
    1cce:	57 e4       	ldi	r21, 0x47	; 71
    1cd0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cd4:	18 16       	cp	r1, r24
    1cd6:	4c f5       	brge	.+82     	; 0x1d2a <get_action+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cd8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cda:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cdc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cde:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ce0:	20 e0       	ldi	r18, 0x00	; 0
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	40 e2       	ldi	r20, 0x20	; 32
    1ce6:	51 e4       	ldi	r21, 0x41	; 65
    1ce8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cec:	dc 01       	movw	r26, r24
    1cee:	cb 01       	movw	r24, r22
    1cf0:	bc 01       	movw	r22, r24
    1cf2:	cd 01       	movw	r24, r26
    1cf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf8:	dc 01       	movw	r26, r24
    1cfa:	cb 01       	movw	r24, r22
    1cfc:	9e 83       	std	Y+6, r25	; 0x06
    1cfe:	8d 83       	std	Y+5, r24	; 0x05
    1d00:	0f c0       	rjmp	.+30     	; 0x1d20 <get_action+0xe2>
    1d02:	89 e1       	ldi	r24, 0x19	; 25
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	9c 83       	std	Y+4, r25	; 0x04
    1d08:	8b 83       	std	Y+3, r24	; 0x03
    1d0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d0e:	01 97       	sbiw	r24, 0x01	; 1
    1d10:	f1 f7       	brne	.-4      	; 0x1d0e <get_action+0xd0>
    1d12:	9c 83       	std	Y+4, r25	; 0x04
    1d14:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d16:	8d 81       	ldd	r24, Y+5	; 0x05
    1d18:	9e 81       	ldd	r25, Y+6	; 0x06
    1d1a:	01 97       	sbiw	r24, 0x01	; 1
    1d1c:	9e 83       	std	Y+6, r25	; 0x06
    1d1e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d20:	8d 81       	ldd	r24, Y+5	; 0x05
    1d22:	9e 81       	ldd	r25, Y+6	; 0x06
    1d24:	00 97       	sbiw	r24, 0x00	; 0
    1d26:	69 f7       	brne	.-38     	; 0x1d02 <get_action+0xc4>
    1d28:	14 c0       	rjmp	.+40     	; 0x1d52 <get_action+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d2c:	78 85       	ldd	r23, Y+8	; 0x08
    1d2e:	89 85       	ldd	r24, Y+9	; 0x09
    1d30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d36:	dc 01       	movw	r26, r24
    1d38:	cb 01       	movw	r24, r22
    1d3a:	9e 83       	std	Y+6, r25	; 0x06
    1d3c:	8d 83       	std	Y+5, r24	; 0x05
    1d3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d40:	9e 81       	ldd	r25, Y+6	; 0x06
    1d42:	9a 83       	std	Y+2, r25	; 0x02
    1d44:	89 83       	std	Y+1, r24	; 0x01
    1d46:	89 81       	ldd	r24, Y+1	; 0x01
    1d48:	9a 81       	ldd	r25, Y+2	; 0x02
    1d4a:	01 97       	sbiw	r24, 0x01	; 1
    1d4c:	f1 f7       	brne	.-4      	; 0x1d4a <get_action+0x10c>
    1d4e:	9a 83       	std	Y+2, r25	; 0x02
    1d50:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(4000);
		PORTA|=(1<<1);
    1d52:	ab e3       	ldi	r26, 0x3B	; 59
    1d54:	b0 e0       	ldi	r27, 0x00	; 0
    1d56:	eb e3       	ldi	r30, 0x3B	; 59
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	80 81       	ld	r24, Z
    1d5c:	82 60       	ori	r24, 0x02	; 2
    1d5e:	8c 93       	st	X, r24
		PORTA&=~(1<<0);
    1d60:	ab e3       	ldi	r26, 0x3B	; 59
    1d62:	b0 e0       	ldi	r27, 0x00	; 0
    1d64:	eb e3       	ldi	r30, 0x3B	; 59
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	80 81       	ld	r24, Z
    1d6a:	8e 7f       	andi	r24, 0xFE	; 254
    1d6c:	8c 93       	st	X, r24


}
    1d6e:	2e 96       	adiw	r28, 0x0e	; 14
    1d70:	0f b6       	in	r0, 0x3f	; 63
    1d72:	f8 94       	cli
    1d74:	de bf       	out	0x3e, r29	; 62
    1d76:	0f be       	out	0x3f, r0	; 63
    1d78:	cd bf       	out	0x3d, r28	; 61
    1d7a:	cf 91       	pop	r28
    1d7c:	df 91       	pop	r29
    1d7e:	08 95       	ret

00001d80 <init_proccess>:

void init_proccess(){
    1d80:	df 93       	push	r29
    1d82:	cf 93       	push	r28
    1d84:	cd b7       	in	r28, 0x3d	; 61
    1d86:	de b7       	in	r29, 0x3e	; 62
    1d88:	61 97       	sbiw	r28, 0x11	; 17
    1d8a:	0f b6       	in	r0, 0x3f	; 63
    1d8c:	f8 94       	cli
    1d8e:	de bf       	out	0x3e, r29	; 62
    1d90:	0f be       	out	0x3f, r0	; 63
    1d92:	cd bf       	out	0x3d, r28	; 61
	uint8 Str[3];
	//LCD_displayString("please");
	while(UART_recieveByte() != 0x11){}
    1d94:	0e 94 8a 11 	call	0x2314	; 0x2314 <UART_recieveByte>
    1d98:	81 31       	cpi	r24, 0x11	; 17
    1d9a:	e1 f7       	brne	.-8      	; 0x1d94 <init_proccess+0x14>
			UART_sendByte(M2_READY); // MC2 is ready
    1d9c:	80 e1       	ldi	r24, 0x10	; 16
    1d9e:	0e 94 73 11 	call	0x22e6	; 0x22e6 <UART_sendByte>
			UART_receiveString(Str); // receive the string
    1da2:	ce 01       	movw	r24, r28
    1da4:	0f 96       	adiw	r24, 0x0f	; 15
    1da6:	0e 94 c2 11 	call	0x2384	; 0x2384 <UART_receiveString>
			//Str[0]=UART_recieveByte();
			LCD_intgerToString(Str[0]);
    1daa:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dac:	88 2f       	mov	r24, r24
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <LCD_intgerToString>
	EEPROM_writeByte(0x0311,Str[1]);
    1db4:	28 89       	ldd	r18, Y+16	; 0x10
    1db6:	81 e1       	ldi	r24, 0x11	; 17
    1db8:	93 e0       	ldi	r25, 0x03	; 3
    1dba:	62 2f       	mov	r22, r18
    1dbc:	0e 94 26 06 	call	0xc4c	; 0xc4c <EEPROM_writeByte>
    1dc0:	80 e0       	ldi	r24, 0x00	; 0
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	a0 e2       	ldi	r26, 0x20	; 32
    1dc6:	b1 e4       	ldi	r27, 0x41	; 65
    1dc8:	8b 87       	std	Y+11, r24	; 0x0b
    1dca:	9c 87       	std	Y+12, r25	; 0x0c
    1dcc:	ad 87       	std	Y+13, r26	; 0x0d
    1dce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dd0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dd2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dd8:	20 e0       	ldi	r18, 0x00	; 0
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	4a e7       	ldi	r20, 0x7A	; 122
    1dde:	53 e4       	ldi	r21, 0x43	; 67
    1de0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de4:	dc 01       	movw	r26, r24
    1de6:	cb 01       	movw	r24, r22
    1de8:	8f 83       	std	Y+7, r24	; 0x07
    1dea:	98 87       	std	Y+8, r25	; 0x08
    1dec:	a9 87       	std	Y+9, r26	; 0x09
    1dee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1df0:	6f 81       	ldd	r22, Y+7	; 0x07
    1df2:	78 85       	ldd	r23, Y+8	; 0x08
    1df4:	89 85       	ldd	r24, Y+9	; 0x09
    1df6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df8:	20 e0       	ldi	r18, 0x00	; 0
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	40 e8       	ldi	r20, 0x80	; 128
    1dfe:	5f e3       	ldi	r21, 0x3F	; 63
    1e00:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e04:	88 23       	and	r24, r24
    1e06:	2c f4       	brge	.+10     	; 0x1e12 <init_proccess+0x92>
		__ticks = 1;
    1e08:	81 e0       	ldi	r24, 0x01	; 1
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	9e 83       	std	Y+6, r25	; 0x06
    1e0e:	8d 83       	std	Y+5, r24	; 0x05
    1e10:	3f c0       	rjmp	.+126    	; 0x1e90 <init_proccess+0x110>
	else if (__tmp > 65535)
    1e12:	6f 81       	ldd	r22, Y+7	; 0x07
    1e14:	78 85       	ldd	r23, Y+8	; 0x08
    1e16:	89 85       	ldd	r24, Y+9	; 0x09
    1e18:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e1a:	20 e0       	ldi	r18, 0x00	; 0
    1e1c:	3f ef       	ldi	r19, 0xFF	; 255
    1e1e:	4f e7       	ldi	r20, 0x7F	; 127
    1e20:	57 e4       	ldi	r21, 0x47	; 71
    1e22:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e26:	18 16       	cp	r1, r24
    1e28:	4c f5       	brge	.+82     	; 0x1e7c <init_proccess+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e30:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e32:	20 e0       	ldi	r18, 0x00	; 0
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	40 e2       	ldi	r20, 0x20	; 32
    1e38:	51 e4       	ldi	r21, 0x41	; 65
    1e3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e3e:	dc 01       	movw	r26, r24
    1e40:	cb 01       	movw	r24, r22
    1e42:	bc 01       	movw	r22, r24
    1e44:	cd 01       	movw	r24, r26
    1e46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e4a:	dc 01       	movw	r26, r24
    1e4c:	cb 01       	movw	r24, r22
    1e4e:	9e 83       	std	Y+6, r25	; 0x06
    1e50:	8d 83       	std	Y+5, r24	; 0x05
    1e52:	0f c0       	rjmp	.+30     	; 0x1e72 <init_proccess+0xf2>
    1e54:	89 e1       	ldi	r24, 0x19	; 25
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	9c 83       	std	Y+4, r25	; 0x04
    1e5a:	8b 83       	std	Y+3, r24	; 0x03
    1e5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e60:	01 97       	sbiw	r24, 0x01	; 1
    1e62:	f1 f7       	brne	.-4      	; 0x1e60 <init_proccess+0xe0>
    1e64:	9c 83       	std	Y+4, r25	; 0x04
    1e66:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e68:	8d 81       	ldd	r24, Y+5	; 0x05
    1e6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e6c:	01 97       	sbiw	r24, 0x01	; 1
    1e6e:	9e 83       	std	Y+6, r25	; 0x06
    1e70:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e72:	8d 81       	ldd	r24, Y+5	; 0x05
    1e74:	9e 81       	ldd	r25, Y+6	; 0x06
    1e76:	00 97       	sbiw	r24, 0x00	; 0
    1e78:	69 f7       	brne	.-38     	; 0x1e54 <init_proccess+0xd4>
    1e7a:	14 c0       	rjmp	.+40     	; 0x1ea4 <init_proccess+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e7c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e7e:	78 85       	ldd	r23, Y+8	; 0x08
    1e80:	89 85       	ldd	r24, Y+9	; 0x09
    1e82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e88:	dc 01       	movw	r26, r24
    1e8a:	cb 01       	movw	r24, r22
    1e8c:	9e 83       	std	Y+6, r25	; 0x06
    1e8e:	8d 83       	std	Y+5, r24	; 0x05
    1e90:	8d 81       	ldd	r24, Y+5	; 0x05
    1e92:	9e 81       	ldd	r25, Y+6	; 0x06
    1e94:	9a 83       	std	Y+2, r25	; 0x02
    1e96:	89 83       	std	Y+1, r24	; 0x01
    1e98:	89 81       	ldd	r24, Y+1	; 0x01
    1e9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e9c:	01 97       	sbiw	r24, 0x01	; 1
    1e9e:	f1 f7       	brne	.-4      	; 0x1e9c <init_proccess+0x11c>
    1ea0:	9a 83       	std	Y+2, r25	; 0x02
    1ea2:	89 83       	std	Y+1, r24	; 0x01
	//EEPROM_writeByte(0x0315,Str[1]);
	_delay_ms(10);
	confirm();
    1ea4:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <confirm>
}
    1ea8:	61 96       	adiw	r28, 0x11	; 17
    1eaa:	0f b6       	in	r0, 0x3f	; 63
    1eac:	f8 94       	cli
    1eae:	de bf       	out	0x3e, r29	; 62
    1eb0:	0f be       	out	0x3f, r0	; 63
    1eb2:	cd bf       	out	0x3d, r28	; 61
    1eb4:	cf 91       	pop	r28
    1eb6:	df 91       	pop	r29
    1eb8:	08 95       	ret

00001eba <main>:

int main(){
    1eba:	df 93       	push	r29
    1ebc:	cf 93       	push	r28
    1ebe:	00 d0       	rcall	.+0      	; 0x1ec0 <main+0x6>
    1ec0:	0f 92       	push	r0
    1ec2:	cd b7       	in	r28, 0x3d	; 61
    1ec4:	de b7       	in	r29, 0x3e	; 62
	DDRA=0xff;
    1ec6:	ea e3       	ldi	r30, 0x3A	; 58
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	8f ef       	ldi	r24, 0xFF	; 255
    1ecc:	80 83       	st	Z, r24

	EEPROM_init();
    1ece:	0e 94 1d 06 	call	0xc3a	; 0xc3a <EEPROM_init>
	UART_init();
    1ed2:	0e 94 59 11 	call	0x22b2	; 0x22b2 <UART_init>
	//LCD_init();
	init_proccess();
    1ed6:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <init_proccess>
	uint8 received=0;
    1eda:	1b 82       	std	Y+3, r1	; 0x03
	uint8 received2=0;
    1edc:	1a 82       	std	Y+2, r1	; 0x02
	char conf=0;
    1ede:	19 82       	std	Y+1, r1	; 0x01

	while(1){

		while(UART_recieveByte() != 0x55){}
    1ee0:	0e 94 8a 11 	call	0x2314	; 0x2314 <UART_recieveByte>
    1ee4:	85 35       	cpi	r24, 0x55	; 85
    1ee6:	e1 f7       	brne	.-8      	; 0x1ee0 <main+0x26>
							UART_sendByte(0x50); // MC2 is ready
    1ee8:	80 e5       	ldi	r24, 0x50	; 80
    1eea:	0e 94 73 11 	call	0x22e6	; 0x22e6 <UART_sendByte>
					received=UART_recieveByte(); // receive the string
    1eee:	0e 94 8a 11 	call	0x2314	; 0x2314 <UART_recieveByte>
    1ef2:	8b 83       	std	Y+3, r24	; 0x03
					if(received==1){
    1ef4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef6:	81 30       	cpi	r24, 0x01	; 1
    1ef8:	c9 f4       	brne	.+50     	; 0x1f2c <main+0x72>
						conf=confirm();
    1efa:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <confirm>
    1efe:	89 83       	std	Y+1, r24	; 0x01
						if(conf=='1'){
    1f00:	89 81       	ldd	r24, Y+1	; 0x01
    1f02:	81 33       	cpi	r24, 0x31	; 49
    1f04:	69 f7       	brne	.-38     	; 0x1ee0 <main+0x26>
							while(UART_recieveByte() != 0x66){}
    1f06:	0e 94 8a 11 	call	0x2314	; 0x2314 <UART_recieveByte>
    1f0a:	86 36       	cpi	r24, 0x66	; 102
    1f0c:	e1 f7       	brne	.-8      	; 0x1f06 <main+0x4c>
														UART_sendByte(0x60); // MC2 is ready
    1f0e:	80 e6       	ldi	r24, 0x60	; 96
    1f10:	0e 94 73 11 	call	0x22e6	; 0x22e6 <UART_sendByte>
												received2=UART_recieveByte(); // receive the string
    1f14:	0e 94 8a 11 	call	0x2314	; 0x2314 <UART_recieveByte>
    1f18:	8a 83       	std	Y+2, r24	; 0x02
												if(received2==1){get_action();}
    1f1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1c:	81 30       	cpi	r24, 0x01	; 1
    1f1e:	19 f4       	brne	.+6      	; 0x1f26 <main+0x6c>
    1f20:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <get_action>
    1f24:	dd cf       	rjmp	.-70     	; 0x1ee0 <main+0x26>
												else{init_proccess();}
    1f26:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <init_proccess>
    1f2a:	da cf       	rjmp	.-76     	; 0x1ee0 <main+0x26>

						}
					}
					else{

						init_proccess();
    1f2c:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <init_proccess>
    1f30:	d7 cf       	rjmp	.-82     	; 0x1ee0 <main+0x26>

00001f32 <SPI_initMaster>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void SPI_initMaster(void)
{
    1f32:	df 93       	push	r29
    1f34:	cf 93       	push	r28
    1f36:	cd b7       	in	r28, 0x3d	; 61
    1f38:	de b7       	in	r29, 0x3e	; 62
	 * SS(PB4)   --> Output
	 * MOSI(PB5) --> Output
	 * MISO(PB6) --> Input
	 * SCK(PB7) --> Output
	 ********************************************/
	DDRB = DDRB | (1<<PB4);
    1f3a:	a7 e3       	ldi	r26, 0x37	; 55
    1f3c:	b0 e0       	ldi	r27, 0x00	; 0
    1f3e:	e7 e3       	ldi	r30, 0x37	; 55
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	80 81       	ld	r24, Z
    1f44:	80 61       	ori	r24, 0x10	; 16
    1f46:	8c 93       	st	X, r24
	DDRB = DDRB | (1<<PB5);
    1f48:	a7 e3       	ldi	r26, 0x37	; 55
    1f4a:	b0 e0       	ldi	r27, 0x00	; 0
    1f4c:	e7 e3       	ldi	r30, 0x37	; 55
    1f4e:	f0 e0       	ldi	r31, 0x00	; 0
    1f50:	80 81       	ld	r24, Z
    1f52:	80 62       	ori	r24, 0x20	; 32
    1f54:	8c 93       	st	X, r24
	DDRB = DDRB & ~(1<<PB6);
    1f56:	a7 e3       	ldi	r26, 0x37	; 55
    1f58:	b0 e0       	ldi	r27, 0x00	; 0
    1f5a:	e7 e3       	ldi	r30, 0x37	; 55
    1f5c:	f0 e0       	ldi	r31, 0x00	; 0
    1f5e:	80 81       	ld	r24, Z
    1f60:	8f 7b       	andi	r24, 0xBF	; 191
    1f62:	8c 93       	st	X, r24
	DDRB = DDRB | (1<<PB7);
    1f64:	a7 e3       	ldi	r26, 0x37	; 55
    1f66:	b0 e0       	ldi	r27, 0x00	; 0
    1f68:	e7 e3       	ldi	r30, 0x37	; 55
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	80 81       	ld	r24, Z
    1f6e:	80 68       	ori	r24, 0x80	; 128
    1f70:	8c 93       	st	X, r24

	SPCR = (1<<SPE) | (1<<MSTR); // enable SPI + enable Master + choose SPI clock = Fosc/4
    1f72:	ed e2       	ldi	r30, 0x2D	; 45
    1f74:	f0 e0       	ldi	r31, 0x00	; 0
    1f76:	80 e5       	ldi	r24, 0x50	; 80
    1f78:	80 83       	st	Z, r24
}
    1f7a:	cf 91       	pop	r28
    1f7c:	df 91       	pop	r29
    1f7e:	08 95       	ret

00001f80 <SPI_initSlave>:

void SPI_initSlave(void)
{
    1f80:	df 93       	push	r29
    1f82:	cf 93       	push	r28
    1f84:	cd b7       	in	r28, 0x3d	; 61
    1f86:	de b7       	in	r29, 0x3e	; 62
	 * SS(PB4)   --> Input
	 * MOSI(PB5) --> Input
	 * MISO(PB6) --> Output
	 * SCK(PB7) --> Input
	 ********************************************/
	DDRB = DDRB & (~(1<<PB4));
    1f88:	a7 e3       	ldi	r26, 0x37	; 55
    1f8a:	b0 e0       	ldi	r27, 0x00	; 0
    1f8c:	e7 e3       	ldi	r30, 0x37	; 55
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	80 81       	ld	r24, Z
    1f92:	8f 7e       	andi	r24, 0xEF	; 239
    1f94:	8c 93       	st	X, r24
	DDRB = DDRB & (~(1<<PB5));
    1f96:	a7 e3       	ldi	r26, 0x37	; 55
    1f98:	b0 e0       	ldi	r27, 0x00	; 0
    1f9a:	e7 e3       	ldi	r30, 0x37	; 55
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	80 81       	ld	r24, Z
    1fa0:	8f 7d       	andi	r24, 0xDF	; 223
    1fa2:	8c 93       	st	X, r24
	DDRB = DDRB | (1<<PB6);
    1fa4:	a7 e3       	ldi	r26, 0x37	; 55
    1fa6:	b0 e0       	ldi	r27, 0x00	; 0
    1fa8:	e7 e3       	ldi	r30, 0x37	; 55
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	80 81       	ld	r24, Z
    1fae:	80 64       	ori	r24, 0x40	; 64
    1fb0:	8c 93       	st	X, r24
	DDRB = DDRB & (~(1<<PB7));
    1fb2:	a7 e3       	ldi	r26, 0x37	; 55
    1fb4:	b0 e0       	ldi	r27, 0x00	; 0
    1fb6:	e7 e3       	ldi	r30, 0x37	; 55
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	80 81       	ld	r24, Z
    1fbc:	8f 77       	andi	r24, 0x7F	; 127
    1fbe:	8c 93       	st	X, r24
	SPCR = (1<<SPE); // just enable SPI + choose SPI clock = Fosc/4
    1fc0:	ed e2       	ldi	r30, 0x2D	; 45
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	80 e4       	ldi	r24, 0x40	; 64
    1fc6:	80 83       	st	Z, r24
}
    1fc8:	cf 91       	pop	r28
    1fca:	df 91       	pop	r29
    1fcc:	08 95       	ret

00001fce <SPI_sendByte>:

void SPI_sendByte(const uint8 data)
{
    1fce:	df 93       	push	r29
    1fd0:	cf 93       	push	r28
    1fd2:	0f 92       	push	r0
    1fd4:	cd b7       	in	r28, 0x3d	; 61
    1fd6:	de b7       	in	r29, 0x3e	; 62
    1fd8:	89 83       	std	Y+1, r24	; 0x01
	SPDR = data; //send data by SPI
    1fda:	ef e2       	ldi	r30, 0x2F	; 47
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	89 81       	ldd	r24, Y+1	; 0x01
    1fe0:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(SPSR,SPIF)){} //wait until SPI interrupt flag=1 (data is sent correctly)
    1fe2:	ee e2       	ldi	r30, 0x2E	; 46
    1fe4:	f0 e0       	ldi	r31, 0x00	; 0
    1fe6:	80 81       	ld	r24, Z
    1fe8:	88 23       	and	r24, r24
    1fea:	dc f7       	brge	.-10     	; 0x1fe2 <SPI_sendByte+0x14>
}
    1fec:	0f 90       	pop	r0
    1fee:	cf 91       	pop	r28
    1ff0:	df 91       	pop	r29
    1ff2:	08 95       	ret

00001ff4 <SPI_recieveByte>:

uint8 SPI_recieveByte(void)
{
    1ff4:	df 93       	push	r29
    1ff6:	cf 93       	push	r28
    1ff8:	cd b7       	in	r28, 0x3d	; 61
    1ffa:	de b7       	in	r29, 0x3e	; 62
   while(BIT_IS_CLEAR(SPSR,SPIF)){} //wait until SPI interrupt flag=1(data is receive correctly)
    1ffc:	ee e2       	ldi	r30, 0x2E	; 46
    1ffe:	f0 e0       	ldi	r31, 0x00	; 0
    2000:	80 81       	ld	r24, Z
    2002:	88 23       	and	r24, r24
    2004:	dc f7       	brge	.-10     	; 0x1ffc <SPI_recieveByte+0x8>
   return SPDR; //return the received byte from SPI data register
    2006:	ef e2       	ldi	r30, 0x2F	; 47
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	80 81       	ld	r24, Z
}
    200c:	cf 91       	pop	r28
    200e:	df 91       	pop	r29
    2010:	08 95       	ret

00002012 <SPI_SendString>:

void SPI_SendString(const uint8 *Str)
{
    2012:	df 93       	push	r29
    2014:	cf 93       	push	r28
    2016:	00 d0       	rcall	.+0      	; 0x2018 <SPI_SendString+0x6>
    2018:	0f 92       	push	r0
    201a:	cd b7       	in	r28, 0x3d	; 61
    201c:	de b7       	in	r29, 0x3e	; 62
    201e:	9b 83       	std	Y+3, r25	; 0x03
    2020:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2022:	19 82       	std	Y+1, r1	; 0x01
    2024:	0e c0       	rjmp	.+28     	; 0x2042 <SPI_SendString+0x30>
	while(Str[i] != '\0')
	{
		SPI_sendByte(Str[i]);
    2026:	89 81       	ldd	r24, Y+1	; 0x01
    2028:	28 2f       	mov	r18, r24
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	8a 81       	ldd	r24, Y+2	; 0x02
    202e:	9b 81       	ldd	r25, Y+3	; 0x03
    2030:	fc 01       	movw	r30, r24
    2032:	e2 0f       	add	r30, r18
    2034:	f3 1f       	adc	r31, r19
    2036:	80 81       	ld	r24, Z
    2038:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <SPI_sendByte>
		i++;
    203c:	89 81       	ldd	r24, Y+1	; 0x01
    203e:	8f 5f       	subi	r24, 0xFF	; 255
    2040:	89 83       	std	Y+1, r24	; 0x01
}

void SPI_SendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2042:	89 81       	ldd	r24, Y+1	; 0x01
    2044:	28 2f       	mov	r18, r24
    2046:	30 e0       	ldi	r19, 0x00	; 0
    2048:	8a 81       	ldd	r24, Y+2	; 0x02
    204a:	9b 81       	ldd	r25, Y+3	; 0x03
    204c:	fc 01       	movw	r30, r24
    204e:	e2 0f       	add	r30, r18
    2050:	f3 1f       	adc	r31, r19
    2052:	80 81       	ld	r24, Z
    2054:	88 23       	and	r24, r24
    2056:	39 f7       	brne	.-50     	; 0x2026 <SPI_SendString+0x14>
	{
		SPI_sendByte(Str[i]);
		i++;
	}
}
    2058:	0f 90       	pop	r0
    205a:	0f 90       	pop	r0
    205c:	0f 90       	pop	r0
    205e:	cf 91       	pop	r28
    2060:	df 91       	pop	r29
    2062:	08 95       	ret

00002064 <SPI_ReceiveString>:

void SPI_ReceiveString(char *Str)
{
    2064:	0f 93       	push	r16
    2066:	1f 93       	push	r17
    2068:	df 93       	push	r29
    206a:	cf 93       	push	r28
    206c:	00 d0       	rcall	.+0      	; 0x206e <SPI_ReceiveString+0xa>
    206e:	0f 92       	push	r0
    2070:	cd b7       	in	r28, 0x3d	; 61
    2072:	de b7       	in	r29, 0x3e	; 62
    2074:	9b 83       	std	Y+3, r25	; 0x03
    2076:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char i = 0;
    2078:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = SPI_recieveByte();
    207a:	89 81       	ldd	r24, Y+1	; 0x01
    207c:	28 2f       	mov	r18, r24
    207e:	30 e0       	ldi	r19, 0x00	; 0
    2080:	8a 81       	ldd	r24, Y+2	; 0x02
    2082:	9b 81       	ldd	r25, Y+3	; 0x03
    2084:	8c 01       	movw	r16, r24
    2086:	02 0f       	add	r16, r18
    2088:	13 1f       	adc	r17, r19
    208a:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <SPI_recieveByte>
    208e:	f8 01       	movw	r30, r16
    2090:	80 83       	st	Z, r24
    2092:	0f c0       	rjmp	.+30     	; 0x20b2 <SPI_ReceiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    2094:	89 81       	ldd	r24, Y+1	; 0x01
    2096:	8f 5f       	subi	r24, 0xFF	; 255
    2098:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = SPI_recieveByte();
    209a:	89 81       	ldd	r24, Y+1	; 0x01
    209c:	28 2f       	mov	r18, r24
    209e:	30 e0       	ldi	r19, 0x00	; 0
    20a0:	8a 81       	ldd	r24, Y+2	; 0x02
    20a2:	9b 81       	ldd	r25, Y+3	; 0x03
    20a4:	8c 01       	movw	r16, r24
    20a6:	02 0f       	add	r16, r18
    20a8:	13 1f       	adc	r17, r19
    20aa:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <SPI_recieveByte>
    20ae:	f8 01       	movw	r30, r16
    20b0:	80 83       	st	Z, r24

void SPI_ReceiveString(char *Str)
{
	unsigned char i = 0;
	Str[i] = SPI_recieveByte();
	while(Str[i] != '#')
    20b2:	89 81       	ldd	r24, Y+1	; 0x01
    20b4:	28 2f       	mov	r18, r24
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ba:	9b 81       	ldd	r25, Y+3	; 0x03
    20bc:	fc 01       	movw	r30, r24
    20be:	e2 0f       	add	r30, r18
    20c0:	f3 1f       	adc	r31, r19
    20c2:	80 81       	ld	r24, Z
    20c4:	83 32       	cpi	r24, 0x23	; 35
    20c6:	31 f7       	brne	.-52     	; 0x2094 <SPI_ReceiveString+0x30>
	{
		i++;
		Str[i] = SPI_recieveByte();
	}
	Str[i] = '\0';
    20c8:	89 81       	ldd	r24, Y+1	; 0x01
    20ca:	28 2f       	mov	r18, r24
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	8a 81       	ldd	r24, Y+2	; 0x02
    20d0:	9b 81       	ldd	r25, Y+3	; 0x03
    20d2:	fc 01       	movw	r30, r24
    20d4:	e2 0f       	add	r30, r18
    20d6:	f3 1f       	adc	r31, r19
    20d8:	10 82       	st	Z, r1
}
    20da:	0f 90       	pop	r0
    20dc:	0f 90       	pop	r0
    20de:	0f 90       	pop	r0
    20e0:	cf 91       	pop	r28
    20e2:	df 91       	pop	r29
    20e4:	1f 91       	pop	r17
    20e6:	0f 91       	pop	r16
    20e8:	08 95       	ret

000020ea <timer02_Init>:
	if(CHANNAL_B)
		COMPARE_REGB=config_ptr->compare_value;
	SET_BIT(TIMSK,config_ptr->interrupt_mode1);
}
#else
void timer02_Init( config* config_ptr){
    20ea:	df 93       	push	r29
    20ec:	cf 93       	push	r28
    20ee:	00 d0       	rcall	.+0      	; 0x20f0 <timer02_Init+0x6>
    20f0:	cd b7       	in	r28, 0x3d	; 61
    20f2:	de b7       	in	r29, 0x3e	; 62
    20f4:	9a 83       	std	Y+2, r25	; 0x02
    20f6:	89 83       	std	Y+1, r24	; 0x01

	CONTROL_REG=(CONTROL_REG&0xB7)|((config_ptr->waveform)<<3);
    20f8:	a3 e5       	ldi	r26, 0x53	; 83
    20fa:	b0 e0       	ldi	r27, 0x00	; 0
    20fc:	e3 e5       	ldi	r30, 0x53	; 83
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	80 81       	ld	r24, Z
    2102:	28 2f       	mov	r18, r24
    2104:	27 7b       	andi	r18, 0xB7	; 183
    2106:	e9 81       	ldd	r30, Y+1	; 0x01
    2108:	fa 81       	ldd	r31, Y+2	; 0x02
    210a:	80 81       	ld	r24, Z
    210c:	88 2f       	mov	r24, r24
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	88 0f       	add	r24, r24
    2112:	99 1f       	adc	r25, r25
    2114:	88 0f       	add	r24, r24
    2116:	99 1f       	adc	r25, r25
    2118:	88 0f       	add	r24, r24
    211a:	99 1f       	adc	r25, r25
    211c:	82 2b       	or	r24, r18
    211e:	8c 93       	st	X, r24
	CONTROL_REG=(CONTROL_REG&0xCF)|((config_ptr->compare) <<4);
    2120:	a3 e5       	ldi	r26, 0x53	; 83
    2122:	b0 e0       	ldi	r27, 0x00	; 0
    2124:	e3 e5       	ldi	r30, 0x53	; 83
    2126:	f0 e0       	ldi	r31, 0x00	; 0
    2128:	80 81       	ld	r24, Z
    212a:	28 2f       	mov	r18, r24
    212c:	2f 7c       	andi	r18, 0xCF	; 207
    212e:	e9 81       	ldd	r30, Y+1	; 0x01
    2130:	fa 81       	ldd	r31, Y+2	; 0x02
    2132:	81 81       	ldd	r24, Z+1	; 0x01
    2134:	88 2f       	mov	r24, r24
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	82 95       	swap	r24
    213a:	92 95       	swap	r25
    213c:	90 7f       	andi	r25, 0xF0	; 240
    213e:	98 27       	eor	r25, r24
    2140:	80 7f       	andi	r24, 0xF0	; 240
    2142:	98 27       	eor	r25, r24
    2144:	82 2b       	or	r24, r18
    2146:	8c 93       	st	X, r24
	CONTROL_REG=(CONTROL_REG&0xF8)|(config_ptr->clock);
    2148:	a3 e5       	ldi	r26, 0x53	; 83
    214a:	b0 e0       	ldi	r27, 0x00	; 0
    214c:	e3 e5       	ldi	r30, 0x53	; 83
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	80 81       	ld	r24, Z
    2152:	98 2f       	mov	r25, r24
    2154:	98 7f       	andi	r25, 0xF8	; 248
    2156:	e9 81       	ldd	r30, Y+1	; 0x01
    2158:	fa 81       	ldd	r31, Y+2	; 0x02
    215a:	82 81       	ldd	r24, Z+2	; 0x02
    215c:	89 2b       	or	r24, r25
    215e:	8c 93       	st	X, r24
	COUNT_REG=0;
    2160:	e2 e5       	ldi	r30, 0x52	; 82
    2162:	f0 e0       	ldi	r31, 0x00	; 0
    2164:	10 82       	st	Z, r1
	COMPARE_REG=config_ptr->compare_value;
    2166:	ac e5       	ldi	r26, 0x5C	; 92
    2168:	b0 e0       	ldi	r27, 0x00	; 0
    216a:	e9 81       	ldd	r30, Y+1	; 0x01
    216c:	fa 81       	ldd	r31, Y+2	; 0x02
    216e:	83 81       	ldd	r24, Z+3	; 0x03
    2170:	8c 93       	st	X, r24
	#ifdef TIMER0
		SET_BIT(TIMSK,config_ptr->interrupt_mode02);
    2172:	a9 e5       	ldi	r26, 0x59	; 89
    2174:	b0 e0       	ldi	r27, 0x00	; 0
    2176:	e9 e5       	ldi	r30, 0x59	; 89
    2178:	f0 e0       	ldi	r31, 0x00	; 0
    217a:	80 81       	ld	r24, Z
    217c:	48 2f       	mov	r20, r24
    217e:	e9 81       	ldd	r30, Y+1	; 0x01
    2180:	fa 81       	ldd	r31, Y+2	; 0x02
    2182:	84 81       	ldd	r24, Z+4	; 0x04
    2184:	28 2f       	mov	r18, r24
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	81 e0       	ldi	r24, 0x01	; 1
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	02 2e       	mov	r0, r18
    218e:	02 c0       	rjmp	.+4      	; 0x2194 <timer02_Init+0xaa>
    2190:	88 0f       	add	r24, r24
    2192:	99 1f       	adc	r25, r25
    2194:	0a 94       	dec	r0
    2196:	e2 f7       	brpl	.-8      	; 0x2190 <timer02_Init+0xa6>
    2198:	84 2b       	or	r24, r20
    219a:	8c 93       	st	X, r24
	#else
		TIMSK|=((1<<config_ptr->interrupt_mode_02)<<6);

	#endif

}
    219c:	0f 90       	pop	r0
    219e:	0f 90       	pop	r0
    21a0:	cf 91       	pop	r28
    21a2:	df 91       	pop	r29
    21a4:	08 95       	ret

000021a6 <set_compare_value>:
#endif
/*
*/
void set_compare_value(uint8 value){
    21a6:	df 93       	push	r29
    21a8:	cf 93       	push	r28
    21aa:	0f 92       	push	r0
    21ac:	cd b7       	in	r28, 0x3d	; 61
    21ae:	de b7       	in	r29, 0x3e	; 62
    21b0:	89 83       	std	Y+1, r24	; 0x01
	COMPARE_REG=value;
    21b2:	ec e5       	ldi	r30, 0x5C	; 92
    21b4:	f0 e0       	ldi	r31, 0x00	; 0
    21b6:	89 81       	ldd	r24, Y+1	; 0x01
    21b8:	80 83       	st	Z, r24
}
    21ba:	0f 90       	pop	r0
    21bc:	cf 91       	pop	r28
    21be:	df 91       	pop	r29
    21c0:	08 95       	ret

000021c2 <Timer_setCallBack>:
void Timer_setCallBack(void(*a_ptr)(void))
{
    21c2:	df 93       	push	r29
    21c4:	cf 93       	push	r28
    21c6:	00 d0       	rcall	.+0      	; 0x21c8 <Timer_setCallBack+0x6>
    21c8:	cd b7       	in	r28, 0x3d	; 61
    21ca:	de b7       	in	r29, 0x3e	; 62
    21cc:	9a 83       	std	Y+2, r25	; 0x02
    21ce:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    21d0:	89 81       	ldd	r24, Y+1	; 0x01
    21d2:	9a 81       	ldd	r25, Y+2	; 0x02
    21d4:	90 93 6b 00 	sts	0x006B, r25
    21d8:	80 93 6a 00 	sts	0x006A, r24
}
    21dc:	0f 90       	pop	r0
    21de:	0f 90       	pop	r0
    21e0:	cf 91       	pop	r28
    21e2:	df 91       	pop	r29
    21e4:	08 95       	ret

000021e6 <__vector_9>:

#ifdef TIMER0
	ISR (TIMER0_OVF_vect){if(g_callBackPtr != NULL_PTR)
    21e6:	1f 92       	push	r1
    21e8:	0f 92       	push	r0
    21ea:	0f b6       	in	r0, 0x3f	; 63
    21ec:	0f 92       	push	r0
    21ee:	11 24       	eor	r1, r1
    21f0:	2f 93       	push	r18
    21f2:	3f 93       	push	r19
    21f4:	4f 93       	push	r20
    21f6:	5f 93       	push	r21
    21f8:	6f 93       	push	r22
    21fa:	7f 93       	push	r23
    21fc:	8f 93       	push	r24
    21fe:	9f 93       	push	r25
    2200:	af 93       	push	r26
    2202:	bf 93       	push	r27
    2204:	ef 93       	push	r30
    2206:	ff 93       	push	r31
    2208:	df 93       	push	r29
    220a:	cf 93       	push	r28
    220c:	cd b7       	in	r28, 0x3d	; 61
    220e:	de b7       	in	r29, 0x3e	; 62
    2210:	80 91 6a 00 	lds	r24, 0x006A
    2214:	90 91 6b 00 	lds	r25, 0x006B
    2218:	00 97       	sbiw	r24, 0x00	; 0
    221a:	29 f0       	breq	.+10     	; 0x2226 <__vector_9+0x40>
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    221c:	e0 91 6a 00 	lds	r30, 0x006A
    2220:	f0 91 6b 00 	lds	r31, 0x006B
    2224:	09 95       	icall
		}}
    2226:	cf 91       	pop	r28
    2228:	df 91       	pop	r29
    222a:	ff 91       	pop	r31
    222c:	ef 91       	pop	r30
    222e:	bf 91       	pop	r27
    2230:	af 91       	pop	r26
    2232:	9f 91       	pop	r25
    2234:	8f 91       	pop	r24
    2236:	7f 91       	pop	r23
    2238:	6f 91       	pop	r22
    223a:	5f 91       	pop	r21
    223c:	4f 91       	pop	r20
    223e:	3f 91       	pop	r19
    2240:	2f 91       	pop	r18
    2242:	0f 90       	pop	r0
    2244:	0f be       	out	0x3f, r0	; 63
    2246:	0f 90       	pop	r0
    2248:	1f 90       	pop	r1
    224a:	18 95       	reti

0000224c <__vector_19>:
	ISR (TIMER0_COMP_vect){
    224c:	1f 92       	push	r1
    224e:	0f 92       	push	r0
    2250:	0f b6       	in	r0, 0x3f	; 63
    2252:	0f 92       	push	r0
    2254:	11 24       	eor	r1, r1
    2256:	2f 93       	push	r18
    2258:	3f 93       	push	r19
    225a:	4f 93       	push	r20
    225c:	5f 93       	push	r21
    225e:	6f 93       	push	r22
    2260:	7f 93       	push	r23
    2262:	8f 93       	push	r24
    2264:	9f 93       	push	r25
    2266:	af 93       	push	r26
    2268:	bf 93       	push	r27
    226a:	ef 93       	push	r30
    226c:	ff 93       	push	r31
    226e:	df 93       	push	r29
    2270:	cf 93       	push	r28
    2272:	cd b7       	in	r28, 0x3d	; 61
    2274:	de b7       	in	r29, 0x3e	; 62

	if(g_callBackPtr != NULL_PTR){	(*g_callBackPtr)(); }}
    2276:	80 91 6a 00 	lds	r24, 0x006A
    227a:	90 91 6b 00 	lds	r25, 0x006B
    227e:	00 97       	sbiw	r24, 0x00	; 0
    2280:	29 f0       	breq	.+10     	; 0x228c <__vector_19+0x40>
    2282:	e0 91 6a 00 	lds	r30, 0x006A
    2286:	f0 91 6b 00 	lds	r31, 0x006B
    228a:	09 95       	icall
    228c:	cf 91       	pop	r28
    228e:	df 91       	pop	r29
    2290:	ff 91       	pop	r31
    2292:	ef 91       	pop	r30
    2294:	bf 91       	pop	r27
    2296:	af 91       	pop	r26
    2298:	9f 91       	pop	r25
    229a:	8f 91       	pop	r24
    229c:	7f 91       	pop	r23
    229e:	6f 91       	pop	r22
    22a0:	5f 91       	pop	r21
    22a2:	4f 91       	pop	r20
    22a4:	3f 91       	pop	r19
    22a6:	2f 91       	pop	r18
    22a8:	0f 90       	pop	r0
    22aa:	0f be       	out	0x3f, r0	; 63
    22ac:	0f 90       	pop	r0
    22ae:	1f 90       	pop	r1
    22b0:	18 95       	reti

000022b2 <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(void)
{
    22b2:	df 93       	push	r29
    22b4:	cf 93       	push	r28
    22b6:	cd b7       	in	r28, 0x3d	; 61
    22b8:	de b7       	in	r29, 0x3e	; 62
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    22ba:	eb e2       	ldi	r30, 0x2B	; 43
    22bc:	f0 e0       	ldi	r31, 0x00	; 0
    22be:	82 e0       	ldi	r24, 0x02	; 2
    22c0:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    22c2:	ea e2       	ldi	r30, 0x2A	; 42
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	88 e1       	ldi	r24, 0x18	; 24
    22c8:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);
    22ca:	e0 e4       	ldi	r30, 0x40	; 64
    22cc:	f0 e0       	ldi	r31, 0x00	; 0
    22ce:	86 e8       	ldi	r24, 0x86	; 134
    22d0:	80 83       	st	Z, r24

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
    22d2:	e0 e4       	ldi	r30, 0x40	; 64
    22d4:	f0 e0       	ldi	r31, 0x00	; 0
    22d6:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
    22d8:	e9 e2       	ldi	r30, 0x29	; 41
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	8c e0       	ldi	r24, 0x0C	; 12
    22de:	80 83       	st	Z, r24
}
    22e0:	cf 91       	pop	r28
    22e2:	df 91       	pop	r29
    22e4:	08 95       	ret

000022e6 <UART_sendByte>:

void UART_sendByte(const uint8 data)
{
    22e6:	df 93       	push	r29
    22e8:	cf 93       	push	r28
    22ea:	0f 92       	push	r0
    22ec:	cd b7       	in	r28, 0x3d	; 61
    22ee:	de b7       	in	r29, 0x3e	; 62
    22f0:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    22f2:	eb e2       	ldi	r30, 0x2B	; 43
    22f4:	f0 e0       	ldi	r31, 0x00	; 0
    22f6:	80 81       	ld	r24, Z
    22f8:	88 2f       	mov	r24, r24
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	80 72       	andi	r24, 0x20	; 32
    22fe:	90 70       	andi	r25, 0x00	; 0
    2300:	00 97       	sbiw	r24, 0x00	; 0
    2302:	b9 f3       	breq	.-18     	; 0x22f2 <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now */
	UDR = data;
    2304:	ec e2       	ldi	r30, 0x2C	; 44
    2306:	f0 e0       	ldi	r31, 0x00	; 0
    2308:	89 81       	ldd	r24, Y+1	; 0x01
    230a:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    230c:	0f 90       	pop	r0
    230e:	cf 91       	pop	r28
    2310:	df 91       	pop	r29
    2312:	08 95       	ret

00002314 <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    2314:	df 93       	push	r29
    2316:	cf 93       	push	r28
    2318:	cd b7       	in	r28, 0x3d	; 61
    231a:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    231c:	eb e2       	ldi	r30, 0x2B	; 43
    231e:	f0 e0       	ldi	r31, 0x00	; 0
    2320:	80 81       	ld	r24, Z
    2322:	88 23       	and	r24, r24
    2324:	dc f7       	brge	.-10     	; 0x231c <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag
	   will be cleared after read this data */
    return UDR;
    2326:	ec e2       	ldi	r30, 0x2C	; 44
    2328:	f0 e0       	ldi	r31, 0x00	; 0
    232a:	80 81       	ld	r24, Z
}
    232c:	cf 91       	pop	r28
    232e:	df 91       	pop	r29
    2330:	08 95       	ret

00002332 <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    2332:	df 93       	push	r29
    2334:	cf 93       	push	r28
    2336:	00 d0       	rcall	.+0      	; 0x2338 <UART_sendString+0x6>
    2338:	0f 92       	push	r0
    233a:	cd b7       	in	r28, 0x3d	; 61
    233c:	de b7       	in	r29, 0x3e	; 62
    233e:	9b 83       	std	Y+3, r25	; 0x03
    2340:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2342:	19 82       	std	Y+1, r1	; 0x01
    2344:	0e c0       	rjmp	.+28     	; 0x2362 <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2346:	89 81       	ldd	r24, Y+1	; 0x01
    2348:	28 2f       	mov	r18, r24
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	8a 81       	ldd	r24, Y+2	; 0x02
    234e:	9b 81       	ldd	r25, Y+3	; 0x03
    2350:	fc 01       	movw	r30, r24
    2352:	e2 0f       	add	r30, r18
    2354:	f3 1f       	adc	r31, r19
    2356:	80 81       	ld	r24, Z
    2358:	0e 94 73 11 	call	0x22e6	; 0x22e6 <UART_sendByte>
		i++;
    235c:	89 81       	ldd	r24, Y+1	; 0x01
    235e:	8f 5f       	subi	r24, 0xFF	; 255
    2360:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2362:	89 81       	ldd	r24, Y+1	; 0x01
    2364:	28 2f       	mov	r18, r24
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	8a 81       	ldd	r24, Y+2	; 0x02
    236a:	9b 81       	ldd	r25, Y+3	; 0x03
    236c:	fc 01       	movw	r30, r24
    236e:	e2 0f       	add	r30, r18
    2370:	f3 1f       	adc	r31, r19
    2372:	80 81       	ld	r24, Z
    2374:	88 23       	and	r24, r24
    2376:	39 f7       	brne	.-50     	; 0x2346 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    2378:	0f 90       	pop	r0
    237a:	0f 90       	pop	r0
    237c:	0f 90       	pop	r0
    237e:	cf 91       	pop	r28
    2380:	df 91       	pop	r29
    2382:	08 95       	ret

00002384 <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    2384:	0f 93       	push	r16
    2386:	1f 93       	push	r17
    2388:	df 93       	push	r29
    238a:	cf 93       	push	r28
    238c:	00 d0       	rcall	.+0      	; 0x238e <UART_receiveString+0xa>
    238e:	0f 92       	push	r0
    2390:	cd b7       	in	r28, 0x3d	; 61
    2392:	de b7       	in	r29, 0x3e	; 62
    2394:	9b 83       	std	Y+3, r25	; 0x03
    2396:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2398:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    239a:	89 81       	ldd	r24, Y+1	; 0x01
    239c:	28 2f       	mov	r18, r24
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	8a 81       	ldd	r24, Y+2	; 0x02
    23a2:	9b 81       	ldd	r25, Y+3	; 0x03
    23a4:	8c 01       	movw	r16, r24
    23a6:	02 0f       	add	r16, r18
    23a8:	13 1f       	adc	r17, r19
    23aa:	0e 94 8a 11 	call	0x2314	; 0x2314 <UART_recieveByte>
    23ae:	f8 01       	movw	r30, r16
    23b0:	80 83       	st	Z, r24
    23b2:	0f c0       	rjmp	.+30     	; 0x23d2 <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    23b4:	89 81       	ldd	r24, Y+1	; 0x01
    23b6:	8f 5f       	subi	r24, 0xFF	; 255
    23b8:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    23ba:	89 81       	ldd	r24, Y+1	; 0x01
    23bc:	28 2f       	mov	r18, r24
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	8a 81       	ldd	r24, Y+2	; 0x02
    23c2:	9b 81       	ldd	r25, Y+3	; 0x03
    23c4:	8c 01       	movw	r16, r24
    23c6:	02 0f       	add	r16, r18
    23c8:	13 1f       	adc	r17, r19
    23ca:	0e 94 8a 11 	call	0x2314	; 0x2314 <UART_recieveByte>
    23ce:	f8 01       	movw	r30, r16
    23d0:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    23d2:	89 81       	ldd	r24, Y+1	; 0x01
    23d4:	28 2f       	mov	r18, r24
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	8a 81       	ldd	r24, Y+2	; 0x02
    23da:	9b 81       	ldd	r25, Y+3	; 0x03
    23dc:	fc 01       	movw	r30, r24
    23de:	e2 0f       	add	r30, r18
    23e0:	f3 1f       	adc	r31, r19
    23e2:	80 81       	ld	r24, Z
    23e4:	83 32       	cpi	r24, 0x23	; 35
    23e6:	31 f7       	brne	.-52     	; 0x23b4 <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    23e8:	89 81       	ldd	r24, Y+1	; 0x01
    23ea:	28 2f       	mov	r18, r24
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	8a 81       	ldd	r24, Y+2	; 0x02
    23f0:	9b 81       	ldd	r25, Y+3	; 0x03
    23f2:	fc 01       	movw	r30, r24
    23f4:	e2 0f       	add	r30, r18
    23f6:	f3 1f       	adc	r31, r19
    23f8:	10 82       	st	Z, r1
}
    23fa:	0f 90       	pop	r0
    23fc:	0f 90       	pop	r0
    23fe:	0f 90       	pop	r0
    2400:	cf 91       	pop	r28
    2402:	df 91       	pop	r29
    2404:	1f 91       	pop	r17
    2406:	0f 91       	pop	r16
    2408:	08 95       	ret

0000240a <__prologue_saves__>:
    240a:	2f 92       	push	r2
    240c:	3f 92       	push	r3
    240e:	4f 92       	push	r4
    2410:	5f 92       	push	r5
    2412:	6f 92       	push	r6
    2414:	7f 92       	push	r7
    2416:	8f 92       	push	r8
    2418:	9f 92       	push	r9
    241a:	af 92       	push	r10
    241c:	bf 92       	push	r11
    241e:	cf 92       	push	r12
    2420:	df 92       	push	r13
    2422:	ef 92       	push	r14
    2424:	ff 92       	push	r15
    2426:	0f 93       	push	r16
    2428:	1f 93       	push	r17
    242a:	cf 93       	push	r28
    242c:	df 93       	push	r29
    242e:	cd b7       	in	r28, 0x3d	; 61
    2430:	de b7       	in	r29, 0x3e	; 62
    2432:	ca 1b       	sub	r28, r26
    2434:	db 0b       	sbc	r29, r27
    2436:	0f b6       	in	r0, 0x3f	; 63
    2438:	f8 94       	cli
    243a:	de bf       	out	0x3e, r29	; 62
    243c:	0f be       	out	0x3f, r0	; 63
    243e:	cd bf       	out	0x3d, r28	; 61
    2440:	09 94       	ijmp

00002442 <__epilogue_restores__>:
    2442:	2a 88       	ldd	r2, Y+18	; 0x12
    2444:	39 88       	ldd	r3, Y+17	; 0x11
    2446:	48 88       	ldd	r4, Y+16	; 0x10
    2448:	5f 84       	ldd	r5, Y+15	; 0x0f
    244a:	6e 84       	ldd	r6, Y+14	; 0x0e
    244c:	7d 84       	ldd	r7, Y+13	; 0x0d
    244e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2450:	9b 84       	ldd	r9, Y+11	; 0x0b
    2452:	aa 84       	ldd	r10, Y+10	; 0x0a
    2454:	b9 84       	ldd	r11, Y+9	; 0x09
    2456:	c8 84       	ldd	r12, Y+8	; 0x08
    2458:	df 80       	ldd	r13, Y+7	; 0x07
    245a:	ee 80       	ldd	r14, Y+6	; 0x06
    245c:	fd 80       	ldd	r15, Y+5	; 0x05
    245e:	0c 81       	ldd	r16, Y+4	; 0x04
    2460:	1b 81       	ldd	r17, Y+3	; 0x03
    2462:	aa 81       	ldd	r26, Y+2	; 0x02
    2464:	b9 81       	ldd	r27, Y+1	; 0x01
    2466:	ce 0f       	add	r28, r30
    2468:	d1 1d       	adc	r29, r1
    246a:	0f b6       	in	r0, 0x3f	; 63
    246c:	f8 94       	cli
    246e:	de bf       	out	0x3e, r29	; 62
    2470:	0f be       	out	0x3f, r0	; 63
    2472:	cd bf       	out	0x3d, r28	; 61
    2474:	ed 01       	movw	r28, r26
    2476:	08 95       	ret

00002478 <itoa>:
    2478:	fb 01       	movw	r30, r22
    247a:	9f 01       	movw	r18, r30
    247c:	e8 94       	clt
    247e:	42 30       	cpi	r20, 0x02	; 2
    2480:	c4 f0       	brlt	.+48     	; 0x24b2 <itoa+0x3a>
    2482:	45 32       	cpi	r20, 0x25	; 37
    2484:	b4 f4       	brge	.+44     	; 0x24b2 <itoa+0x3a>
    2486:	4a 30       	cpi	r20, 0x0A	; 10
    2488:	29 f4       	brne	.+10     	; 0x2494 <itoa+0x1c>
    248a:	97 fb       	bst	r25, 7
    248c:	1e f4       	brtc	.+6      	; 0x2494 <itoa+0x1c>
    248e:	90 95       	com	r25
    2490:	81 95       	neg	r24
    2492:	9f 4f       	sbci	r25, 0xFF	; 255
    2494:	64 2f       	mov	r22, r20
    2496:	77 27       	eor	r23, r23
    2498:	0e 94 6d 12 	call	0x24da	; 0x24da <__udivmodhi4>
    249c:	80 5d       	subi	r24, 0xD0	; 208
    249e:	8a 33       	cpi	r24, 0x3A	; 58
    24a0:	0c f0       	brlt	.+2      	; 0x24a4 <itoa+0x2c>
    24a2:	89 5d       	subi	r24, 0xD9	; 217
    24a4:	81 93       	st	Z+, r24
    24a6:	cb 01       	movw	r24, r22
    24a8:	00 97       	sbiw	r24, 0x00	; 0
    24aa:	a1 f7       	brne	.-24     	; 0x2494 <itoa+0x1c>
    24ac:	16 f4       	brtc	.+4      	; 0x24b2 <itoa+0x3a>
    24ae:	5d e2       	ldi	r21, 0x2D	; 45
    24b0:	51 93       	st	Z+, r21
    24b2:	10 82       	st	Z, r1
    24b4:	c9 01       	movw	r24, r18
    24b6:	0c 94 5d 12 	jmp	0x24ba	; 0x24ba <strrev>

000024ba <strrev>:
    24ba:	dc 01       	movw	r26, r24
    24bc:	fc 01       	movw	r30, r24
    24be:	67 2f       	mov	r22, r23
    24c0:	71 91       	ld	r23, Z+
    24c2:	77 23       	and	r23, r23
    24c4:	e1 f7       	brne	.-8      	; 0x24be <strrev+0x4>
    24c6:	32 97       	sbiw	r30, 0x02	; 2
    24c8:	04 c0       	rjmp	.+8      	; 0x24d2 <strrev+0x18>
    24ca:	7c 91       	ld	r23, X
    24cc:	6d 93       	st	X+, r22
    24ce:	70 83       	st	Z, r23
    24d0:	62 91       	ld	r22, -Z
    24d2:	ae 17       	cp	r26, r30
    24d4:	bf 07       	cpc	r27, r31
    24d6:	c8 f3       	brcs	.-14     	; 0x24ca <strrev+0x10>
    24d8:	08 95       	ret

000024da <__udivmodhi4>:
    24da:	aa 1b       	sub	r26, r26
    24dc:	bb 1b       	sub	r27, r27
    24de:	51 e1       	ldi	r21, 0x11	; 17
    24e0:	07 c0       	rjmp	.+14     	; 0x24f0 <__udivmodhi4_ep>

000024e2 <__udivmodhi4_loop>:
    24e2:	aa 1f       	adc	r26, r26
    24e4:	bb 1f       	adc	r27, r27
    24e6:	a6 17       	cp	r26, r22
    24e8:	b7 07       	cpc	r27, r23
    24ea:	10 f0       	brcs	.+4      	; 0x24f0 <__udivmodhi4_ep>
    24ec:	a6 1b       	sub	r26, r22
    24ee:	b7 0b       	sbc	r27, r23

000024f0 <__udivmodhi4_ep>:
    24f0:	88 1f       	adc	r24, r24
    24f2:	99 1f       	adc	r25, r25
    24f4:	5a 95       	dec	r21
    24f6:	a9 f7       	brne	.-22     	; 0x24e2 <__udivmodhi4_loop>
    24f8:	80 95       	com	r24
    24fa:	90 95       	com	r25
    24fc:	bc 01       	movw	r22, r24
    24fe:	cd 01       	movw	r24, r26
    2500:	08 95       	ret

00002502 <_exit>:
    2502:	f8 94       	cli

00002504 <__stop_program>:
    2504:	ff cf       	rjmp	.-2      	; 0x2504 <__stop_program>
